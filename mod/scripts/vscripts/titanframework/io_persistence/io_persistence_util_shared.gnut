globalize_all_functions
global enum eLoadoutStatus 
{
	ACCEPTED,
	REJECTED,
	NO_RESPONSE
}
global struct frameworkLoadoutRejectionReason
{
    int status = eLoadoutStatus.NO_RESPONSE //TODO allow multiple rejection reasons
	string reason //Represents the reason for the rejection
    string cause //Represents the item/property that caused the rejection
	string badValue //Represents the value that caused the rejection, when applicable
    //TODO: Make most of these Enums
}
global struct frameworkPersistentTitanLoadout
{
    string loadoutName
    string titanName
    string sourceMod
    string sourceModVersion
    string fileName//This should always be populated in saveNewTitanLoadout
    TitanLoadoutDef loadout
    table additionalVars
    frameworkLoadoutRejectionReason response//Only used if rejected is true
}
global struct frameworkPilotLoadoutOverrides//This is used to override so should only store differences
{
    string fileName
    //PilotLoadoutDef Loadout//Maybe this should be a table?
    table<string, string> loadout //Fuck it this is a table now so i can index with a for loop
    table additionalVars//Shouldnt be any for pilot loadouts
    frameworkLoadoutRejectionReason response
}
global const FRAMEWORK_TITAN_OFFSET = 10
global const FRAMEWORK_PILOT_OFFSET = 0 //Use overrides not custom loadouts so dont actually need this, incase i decide to do custom loadouts as well
string function GetFrameworkLoadoutValue(frameworkPersistentTitanLoadout loadout, string propertyName)
{
	string value = GetTitanLoadoutValue(loadout.loadout, propertyName)
	if( value == "" )
	{
		if( value in loadout.additionalVars )
		{
			value = expect string(loadout.additionalVars[propertyName])
		}
	}

	return value
}


void function UpdateDerivedFrameworkLoadoutValues( frameworkPersistentTitanLoadout loadout )
{
    table<string, bool functionref(string value, string property, TitanLoadoutDef acceptedLoadout)> validation 
    if(GetModdedTitanClasses().contains(loadout.titanName))
    {
        validation = GetModdedTitanData(loadout.titanName).derivedData.PersistentValuesValidation
    }
    else if(IsBaseTitan(loadout.titanName))
    {
        validation = getBaseLoadoutValidationTable()
    }
    else
    {
        return //Typically a modded titan that has been removed or disabled
    }
    bool canHavePrime 
    if(IsBaseTitan(loadout.titanName) && loadout.titanName != "vanguard")
        canHavePrime = true
    else if(GetModdedTitanClasses().contains(loadout.titanName))
        canHavePrime = GetModdedTitanData(loadout.titanName).altChassisType == frameworkAltChassisMethod.PRIME_TITAN
    if(canHavePrime)
    {
        if(loadout.loadout.isPrime == "titan_is_prime" && loadout.loadout.setFile.find("prime") == null)//This is really scuffed, oh well!
        {
            print("titan is prime, updating set file")
            loadout.loadout.setFile = GetPrimeTitanSetFileFromNonPrimeSetFile(loadout.loadout.setFile)
        }
        else if (loadout.loadout.isPrime == "titan_is_not_prime" && loadout.loadout.setFile.find("prime") != null)//This is really scuffed, oh well!
            loadout.loadout.setFile = GetBaseTitanSetFileFromPrimeSetFile(loadout.loadout.setFile)
		else if (loadout.loadout.isPrime == "titan_is_not_prime" && !IsBaseTitan(loadout.titanName)) {
	    	loadout.loadout.setFile = GetModdedTitanData(loadout.titanName).BaseSetFile
		}
    }
    else if (loadout.titanName != "vanguard" && GetModdedTitanData(loadout.titanName).altChassisType == frameworkAltChassisMethod.ALT_TITAN)
    {
        if (!validation["titanExecution"](loadout.loadout.titanExecution, "titanExecution", loadout.loadout))
        {
            foreach( FrameworkChassisStruct chassisStruct in GetModdedTitanData(loadout.titanName).altChassisArray )
            {
                if(chassisStruct.setFile == loadout.loadout.setFile)
                {
                    loadout.loadout.titanExecution = GetAllItemsOfType(chassisStruct.executionAnimationType)[0].ref
                    break
                }
            }
        //FUCK
		loadout.loadout.setFile = GetModdedTitanData(loadout.titanName).altChassisArray[0].setFile
        }   
    }
    else if (loadout.titanName != "vanguard") {
		loadout.loadout.setFile = GetModdedTitanData(loadout.titanName).BaseSetFile //I dont want to have to do this really 
		//but its the easiest way to let people change the setfile in code without everything exploding
	}

    loadout.loadout.setFileMods = GetSetFileModsForSettingType("titan", [ loadout.loadout.passive1, loadout.loadout.passive2, loadout.loadout.passive3, loadout.loadout.passive4, loadout.loadout.passive5, loadout.loadout.passive6 ] )


    //TODO: Add callbacks for custom derived values <- You wrote this months ago and you still have not done this
	//Lol, lmao even
}

table function TitanLoadoutDefToTable(TitanLoadoutDef loadout)
{
	table Table
	Table["name"] <- loadout.name
	Table["titanClass"] <- loadout.titanClass
	Table["primeTitanRef"] <- loadout.primeTitanRef
	Table["setFile"] <- loadout.setFile
	Table["primaryMod"] <- loadout.primaryMod
	Table["special"] <- loadout.special
	Table["antirodeo"] <- loadout.antirodeo
	Table["passive1"] <- loadout.passive1
	Table["passive2"] <- loadout.passive2
	Table["passive3"] <- loadout.passive3
	Table["passive4"] <- loadout.passive4
	Table["passive5"] <- loadout.passive5
	Table["passive6"] <- loadout.passive6
	Table["voice"] <- loadout.voice
	Table["skinIndex"] <- loadout.skinIndex
	Table["camoIndex"] <- loadout.camoIndex
	Table["decalIndex"] <- loadout.decalIndex
	Table["primarySkinIndex"] <- loadout.primarySkinIndex
	Table["primaryCamoIndex"] <- loadout.primaryCamoIndex
	Table["difficulty"] <- loadout.difficulty
	Table["isPrime"] <- loadout.isPrime
	Table["primeSkinIndex"] <- loadout.primeSkinIndex
	Table["primeCamoIndex"] <- loadout.primeCamoIndex
	Table["primeDecalIndex"] <- loadout.primeDecalIndex
	Table["showArmBadge"] <- loadout.showArmBadge
	//Table["setFileMods"] <- loadout.setFileMods
	Table["melee"] <- loadout.melee
	Table["coreAbility"] <- loadout.coreAbility
	Table["primary"] <- loadout.primary
	Table["primaryAttachment"] <- loadout.primaryAttachment
	//Table["primaryMods"] <- loadout.primaryMods
	Table["ordnance"] <- loadout.ordnance
	//Table["ordnanceMods"] <- loadout.ordnanceMods
	//Table["specialMods"] <- loadout.specialMods
	//Table["antirodeoMods"] <- loadout.antirodeoMods
	Table["titanExecution"] <- loadout.titanExecution
	return Table

}
void function TableToTitanLoadoutInplace(TitanLoadoutDef loadout, table loadoutTable)
{
    
    loadout.name             = expect string(loadoutTable["name"])
    loadout.titanClass       = expect string(loadoutTable["titanClass"])
    loadout.primeTitanRef    = expect string(loadoutTable["primeTitanRef"])
    loadout.setFile          = expect string(loadoutTable["setFile"])
    loadout.primaryMod       = expect string(loadoutTable["primaryMod"])
    loadout.special          = expect string(loadoutTable["special"])
    loadout.antirodeo        = expect string(loadoutTable["antirodeo"])
    loadout.passive1         = expect string(loadoutTable["passive1"])
    loadout.passive2         = expect string(loadoutTable["passive2"])
    loadout.passive3         = expect string(loadoutTable["passive3"])
    loadout.passive4         = expect string(loadoutTable["passive4"])
    loadout.passive5         = expect string(loadoutTable["passive5"])
    loadout.passive6         = expect string(loadoutTable["passive6"])
    loadout.voice            = expect string(loadoutTable["voice"])
    loadout.skinIndex        = expect int(loadoutTable["skinIndex"])
    loadout.camoIndex        = expect int(loadoutTable["camoIndex"])
    loadout.decalIndex       = expect int(loadoutTable["decalIndex"])
    loadout.primarySkinIndex = expect int(loadoutTable["primarySkinIndex"])
    loadout.primaryCamoIndex = expect int(loadoutTable["primaryCamoIndex"])
    loadout.difficulty       = expect int(loadoutTable["difficulty"])
    loadout.isPrime          = expect string(loadoutTable["isPrime"])
    loadout.primeSkinIndex   = expect int(loadoutTable["primeSkinIndex"])
    loadout.primeCamoIndex   = expect int(loadoutTable["primeCamoIndex"])
    loadout.primeDecalIndex  = expect int(loadoutTable["primeDecalIndex"])
    loadout.showArmBadge     = expect int(loadoutTable["showArmBadge"])
    //loadout.setFileMods      = expect string(loadoutTable["setFileMods"])
    loadout.melee            = expect string(loadoutTable["melee"])
    loadout.coreAbility      = expect string(loadoutTable["coreAbility"])
    loadout.primary          = expect string(loadoutTable["primary"])
    loadout.primaryAttachment= expect string(loadoutTable["primaryAttachment"])
    //loadout.primaryMods      = expect string(loadoutTable["primaryMods"])
    loadout.ordnance         = expect string(loadoutTable["ordnance"])
    //loadout.ordnanceMods     = expect string(loadoutTable["ordnanceMods"])

    //loadout.specialMods      = expect string(loadoutTable["specialMods"])
    //loadout.antirodeoMods    = expect string(loadoutTable["antirodeoMods"])
    loadout.titanExecution   = expect string(loadoutTable["titanExecution"])

}


void function overrideTitanLoadoutWithTitanLoadout(TitanLoadoutDef loadout1, TitanLoadoutDef loadout2)
{
    loadout1.name              = loadout2.name
    loadout1.titanClass        = loadout2.titanClass
    loadout1.primeTitanRef     = loadout2.primeTitanRef 
    loadout1.setFile           = loadout2.setFile
    loadout1.primaryMod        = loadout2.primaryMod
    loadout1.special           = loadout2.special
    loadout1.antirodeo         = loadout2.antirodeo
    loadout1.passive1          = loadout2.passive1
    loadout1.passive2          = loadout2.passive2
    loadout1.passive3          = loadout2.passive3
    loadout1.passive4          = loadout2.passive4
    loadout1.passive5          = loadout2.passive5
    loadout1.passive6          = loadout2.passive6
    loadout1.voice             = loadout2.voice
    loadout1.skinIndex         = loadout2.skinIndex
    loadout1.camoIndex         = loadout2.camoIndex
    loadout1.decalIndex        = loadout2.decalIndex
    loadout1.primarySkinIndex  = loadout2.primarySkinIndex
    loadout1.primaryCamoIndex  = loadout2.primaryCamoIndex
    loadout1.difficulty        = loadout2.difficulty
    loadout1.isPrime           = loadout2.isPrime
    loadout1.primeSkinIndex    = loadout2.primeSkinIndex
    loadout1.primeCamoIndex    = loadout2.primeCamoIndex
    loadout1.primeDecalIndex   = loadout2.primeDecalIndex
    loadout1.showArmBadge      = loadout2.showArmBadge
    loadout1.setFileMods       = clone loadout2.setFileMods
    loadout1.melee             = loadout2.melee
    loadout1.coreAbility       = loadout2.coreAbility
    loadout1.primary           = loadout2.primary
    loadout1.primaryAttachment = loadout2.primaryAttachment
    loadout1.primaryMods       = clone loadout2.primaryMods
    loadout1.ordnance          = loadout2.ordnance
    loadout1.ordnanceMods      = clone loadout2.ordnanceMods
    loadout1.specialMods       = clone loadout2.specialMods
    loadout1.antirodeoMods     = clone loadout2.antirodeoMods
    loadout1.titanExecution    = loadout2.titanExecution
}
void function overideFrameworkTitanLoadoutWithTitanLoadout(frameworkPersistentTitanLoadout copyFrom, frameworkPersistentTitanLoadout copyTo)
{
    copyTo.loadoutName = copyFrom.loadoutName
    copyTo.titanName = copyFrom.titanName
    copyTo.sourceMod = copyFrom.sourceMod
    copyTo.sourceModVersion = copyFrom.sourceModVersion
    overrideTitanLoadoutWithTitanLoadout(copyTo.loadout, copyFrom.loadout)
    copyTo.additionalVars = clone copyFrom.additionalVars
}
frameworkPersistentTitanLoadout function createClientFrameworkLoadoutFromLoadoutDef(TitanLoadoutDef loadout)
{
    frameworkPersistentTitanLoadout frameworkLoadout
    frameworkLoadout.loadoutName = loadout.name
    frameworkLoadout.titanName = loadout.titanClass
    frameworkLoadout.sourceMod = "titanFramework"
    frameworkLoadout.sourceModVersion = FRAMEWORK_VERSION
    frameworkLoadout.loadout.name = loadout.name

    frameworkLoadout.loadout.name             = loadout.name
    frameworkLoadout.loadout.titanClass       = loadout.titanClass
    frameworkLoadout.loadout.primeTitanRef    = loadout.primeTitanRef 
    frameworkLoadout.loadout.setFile          = loadout.setFile
    frameworkLoadout.loadout.primaryMod       = loadout.primaryMod
    frameworkLoadout.loadout.special          = loadout.special
    frameworkLoadout.loadout.antirodeo        = loadout.antirodeo
    frameworkLoadout.loadout.passive1         = loadout.passive1
    frameworkLoadout.loadout.passive2         = loadout.passive2
    frameworkLoadout.loadout.passive3         = loadout.passive3
    frameworkLoadout.loadout.passive4         = loadout.passive4
    frameworkLoadout.loadout.passive5         = loadout.passive5
    frameworkLoadout.loadout.passive6         = loadout.passive6
    frameworkLoadout.loadout.voice            = loadout.voice
    frameworkLoadout.loadout.skinIndex        = loadout.skinIndex
    frameworkLoadout.loadout.camoIndex        = loadout.camoIndex
    frameworkLoadout.loadout.decalIndex       = loadout.decalIndex
    frameworkLoadout.loadout.primarySkinIndex = loadout.primarySkinIndex
    frameworkLoadout.loadout.primaryCamoIndex = loadout.primaryCamoIndex
    frameworkLoadout.loadout.difficulty       = loadout.difficulty
    frameworkLoadout.loadout.isPrime          = loadout.isPrime
    frameworkLoadout.loadout.primeSkinIndex   = loadout.primeSkinIndex
    frameworkLoadout.loadout.primeCamoIndex   = loadout.primeCamoIndex
    frameworkLoadout.loadout.primeDecalIndex  = loadout.primeDecalIndex
    frameworkLoadout.loadout.showArmBadge     = loadout.showArmBadge
    frameworkLoadout.loadout.setFileMods      = loadout.setFileMods
    frameworkLoadout.loadout.melee            = loadout.melee
    frameworkLoadout.loadout.coreAbility      = loadout.coreAbility
    frameworkLoadout.loadout.primary          = loadout.primary
    frameworkLoadout.loadout.primaryAttachment= loadout.primaryAttachment
    frameworkLoadout.loadout.primaryMods      = loadout.primaryMods
    frameworkLoadout.loadout.ordnance         = loadout.ordnance
    frameworkLoadout.loadout.ordnanceMods     = loadout.ordnanceMods
    frameworkLoadout.loadout.specialMods      = loadout.specialMods
    frameworkLoadout.loadout.antirodeoMods    = loadout.antirodeoMods
    frameworkLoadout.loadout.titanExecution   = loadout.titanExecution

    return frameworkLoadout
}//script_client saveNewTitanLoadout(createClientFrameworkLoadoutFromLoadoutDef(shGlobal.cachedTitanLoadouts[0]))
bool function TrySetTitanLoadoutValue( TitanLoadoutDef loadout, string property, string value )
{
	switch ( property )
	{
		case "name":
			loadout.name = value
			break

		case "setFile":
			loadout.setFile = value
			break

		case "primaryMod":
			loadout.primaryMod = value
			break

		case "special":
			loadout.special = value
			break

		case "antirodeo":
			loadout.antirodeo = value
			break

		case "passive1":
			loadout.passive1 = value
			break

		case "passive2":
			loadout.passive2 = value
			break

		case "passive3":
			loadout.passive3 = value
			break

		case "passive4":
			loadout.passive4 = value
			break

		case "passive5":
			loadout.passive5 = value
			break

		case "passive6":
			loadout.passive6 = value
			break

		case "skinIndex":
			loadout.skinIndex = int( value )
			break

		case "camoIndex":
			loadout.camoIndex = int( value )
			break

		case "decalIndex":
			loadout.decalIndex = int( value )
			break

		case "primarySkinIndex":
			loadout.primarySkinIndex = int( value )
			break

		case "primaryCamoIndex":
			loadout.primaryCamoIndex = int( value )
			break

		case "isPrime":
			loadout.isPrime =  value
			break

		case "primeSkinIndex":
			loadout.primeSkinIndex = int( value )
			break

		case "primeCamoIndex":
			loadout.primeCamoIndex = int( value )
			break

		case "primeDecalIndex":
			loadout.primeDecalIndex = int( value )
			break

		case "titanExecution":
			loadout.titanExecution = value
			break

		case "showArmBadge":
			loadout.showArmBadge = int( value )
			break
        case "primary":
            loadout.primary = value
            break
        case "ordnance":
            loadout.ordnance = value
            break
        case "melee":
            loadout.melee = value
            break
        case "coreAbility":
            loadout.coreAbility = value
            break
        default:
            return false
	}
    return true
}
int function GetModdedLoadoutNameIndex(string name)
{
    array<string> words = split(name, "_" )
    return words[2].tointeger()
}
string function GetModdedLoadoutNameFromIndex(int index, string loadoutType, bool adjustIndex = true)
{
    if(loadoutType == "titan")
    {
        loadoutType = "T"
    }
    else if(loadoutType == "pilot")
    {
        loadoutType = "P"
    }
    if(adjustIndex)
    {
        index -= loadoutType == "T" ? FRAMEWORK_TITAN_OFFSET : FRAMEWORK_PILOT_OFFSET
    }
    return loadoutType + "_LOADOUT_" + index + ".json"
}
int function SortFrameworkTitanLoadouts(frameworkPersistentTitanLoadout a, frameworkPersistentTitanLoadout b)
{
    if(GetModdedLoadoutNameIndex(a.fileName) < GetModdedLoadoutNameIndex(b.fileName) )
    {
        return -1
    }
    if(GetModdedLoadoutNameIndex( a.fileName ) > GetModdedLoadoutNameIndex( b.fileName ))
    {
        return 1
    }
    return 0
}
int function SortFrameworkTitanLoadoutsByName(string a, string b)
{
	if(GetModdedLoadoutNameIndex(a) < GetModdedLoadoutNameIndex(b) )
	{
		return -1
	}
	if(GetModdedLoadoutNameIndex( a ) > GetModdedLoadoutNameIndex( b ))
	{
		return 1
	}
	return 0
}
