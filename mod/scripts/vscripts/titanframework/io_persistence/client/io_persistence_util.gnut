untyped
globalize_all_functions

int notify = -1

global struct frameworkHelperValuesStruct
{
    bool savingNewLoadout
}
global struct clientframeworkPersistentTitanLoadoutstruct
{
    array<string> filesToLoad
    string moddedLoadoutIndex
    table<string, frameworkPersistentTitanLoadout> loadouts//Indexed by filename
    array<frameworkPersistentTitanLoadout> loadoutsToSave //Should always be empty when not saving, used for race conditions (unless mutex already fixes that)
}
global struct clientframeworkPersistentPilotLoadoutstruct
{
    array<string> filesToLoad
    frameworkPilotLoadoutOverrides[NUM_PERSISTENT_PILOT_LOADOUTS] loadouts//Indexed by filename
    array<frameworkPilotLoadoutOverrides> loadoutsToSave //Should always be empty when not saving, used for race conditions (unless mutex already fixes that)
}

global clientframeworkPersistentTitanLoadoutstruct clientframeworkPersistentTitanLoadouts 
global clientframeworkPersistentPilotLoadoutstruct clientframeworkPersistentPilotLoadouts
global frameworkHelperValuesStruct frameworkHelperValues
void function cl_titanFrameworkPersistenceInit()
{
    #if CLIENT && MP
    RunUIScript("cl_titanFrameworkPersistenceInit")
    #endif
    //RegisterSignal("FrameworkloadoutsReady")
   
    #if CLIENT
    AddServerToClientStringCommandCallback("FrameworkInformLoadoutResponse", FrameworkInformLoadoutResponse)
    SetupXPCallbacks()
    
    #endif
    thread cl_titanFrameworkPersistenceInitThread()

    
}
#if UI
void function popupIfNeeded()
{
    thread popupIfNeededThread()
}
void function popupIfNeededThread()
{
    wait(1)
    print("notify " + notify)
    while(notify == -1)
        wait(1)
    print("notify " + notify)
    if(notify == 1)
    {
        WelcomeToFramework()
        notify = 0
    }
    else if(notify == 2)
    {
        WelcomeBackToFramework()
        notify = 0
    }
    else if(notify == 3)
    {
        FrameworkHasBeenDowngraded()
        notify = 0
    }
}
#endif
#if CLIENT
void function FrameworkInformLoadoutResponse(array<string> args)
{
    foreach(string arg in args)
    {
        printt("FrameworkInformLoadoutResponse", arg)
    }
	//TODO: Make this a popup on loadouts screen
    if(args[0] == "#REJECED")
    {
        print("FrameworkInformLoadoutResponse: Loadout rejected by server due to bad format")
        return
    }
    string fileName = args[0]
    frameworkPersistentTitanLoadout loadout = clientframeworkPersistentTitanLoadouts.loadouts[fileName]
    if(args[1] == "#REJECTED")
    {
        loadout.response.status = eLoadoutStatus.REJECED
        if(args[3] != "#FAILEDVALIDATION")
        {
            loadout.response.reason = args[2]
            loadout.response.cause = args[3]
        }
        else
        {
            loadout.response.reason = args[3]
            loadout.response.cause = args[4]
            loadout.response.badValue = args[5]
        }    
        print("reason " + loadout.response.reason + " cause " + loadout.response.cause + " bad value " + loadout.response.badValue)
    }
    else
    {
        loadout.response.status = eLoadoutStatus.ACCEPTED
    }//wait how come i never synced this with ui
}
#endif

bool function PlayerHasModdedTitanLoadout()
{
    return clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex != ""
}
bool function PlayerModdedLoadoutExists(string index)
{
    return index in clientframeworkPersistentTitanLoadouts.loadouts
}
string function GetCurrentModdedPersistentTitanLoadoutIndex()
{
    return clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex
}
frameworkPersistentTitanLoadout function GetModdedPersistentTitanLoadout(string index)
{
    return clientframeworkPersistentTitanLoadouts.loadouts[index]
}
frameworkPersistentTitanLoadout function GetCurrentModdedPersistentTitanLoadout()
{
    return clientframeworkPersistentTitanLoadouts.loadouts[clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex]
}
TitanLoadoutDef function GetCurrentModdedTitanLoadoutDef()
{
    return clientframeworkPersistentTitanLoadouts.loadouts[clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex].loadout
}
void function setModdedTitanLoadoutIndex(string index, callback = false)
{
    clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex = index
    #if UI
    if(!callback)
        RunClientScript("setModdedTitanLoadoutIndex", index, true)
    //ClientCommand("titanFrameworkSelectLoadout " + index )
    #endif
    #if CLIENT
    if(!callback)
        RunUIScript( "setModdedTitanLoadoutIndex", index, true ) 
    if(index != "")
        DescribeNewTitanLoadoutToServer(GetCurrentModdedPersistentTitanLoadout())
    else
    {
        GetLocalClientPlayer().ClientCommand("titanFrameworkSelectLoadout default")
    }
    NSSaveJSONFile("frameworkCFG.json", {version = FRAMEWORK_VERSION, moddedSelected = index})
    #endif
}
void function cl_titanFrameworkPersistenceInitThread()
{
    if(!NSDoesFileExist("frameworkCFG.json"))
    {
        print("Creating new frameworkCFG.json")
        notify = 1
        #if UI
        WelcomeToFramework()
        #endif
        NSSaveJSONFile("frameworkCFG.json", {version = FRAMEWORK_VERSION, moddedSelected = ""});
    }
    if(!NSDoesFileExist("frameworkXP.json"))
    {
        print("Creating new frameworkXP.json")
        NSSaveJSONFile("frameworkXP.json", {version = FRAMEWORK_VERSION});
    }
    NSLoadJSONFile( "frameworkXP.json", loadPersistentXP)
    NSLoadJSONFile( "frameworkCFG.json", loadPersistentData)
}
#if UI
void function WelcomeToFramework()
{
    DialogData dialogData
    dialogData.header = Localize("#WELCOME_TO_FRAMEWORK")
    dialogData.message = Localize( "#WELCOME_TO_FRAMEWORK_DESCRIPTION" )

    AddDialogButton( dialogData, Localize("#CLOSE_MESSAGE") )
    AddDialogFooter( dialogData, "#A_BUTTON_SELECT" )
    AddDialogFooter( dialogData, "#B_BUTTON_BACK" )

    OpenDialog( dialogData )
}
void function WelcomeBackToFramework()
{
    DialogData dialogData
    dialogData.header = Localize("#WELCOME_BACK_TO_FRAMEWORK")
    dialogData.message = Localize( "#WELCOME_BACK_TO_FRAMEWORK_DESCRIPTION" )

    AddDialogButton( dialogData, Localize("#CLOSE_MESSAGE") )
    AddDialogFooter( dialogData, "#A_BUTTON_SELECT" )
    AddDialogFooter( dialogData, "#B_BUTTON_BACK" )

    OpenDialog( dialogData )
}
void function FrameworkHasBeenDowngraded()
{
    DialogData dialogData
    dialogData.header = Localize("#FRAMEWORK_HAS_BEEN_DOWNGRADED")
    dialogData.message = Localize( "#FRAMEWORK_HAS_BEEN_DOWNGRADED_DESCRIPTION" )

    AddDialogButton( dialogData, Localize("#CLOSE_MESSAGE") )
    AddDialogFooter( dialogData, "#A_BUTTON_SELECT" )
    AddDialogFooter( dialogData, "#B_BUTTON_BACK" )

    OpenDialog( dialogData )
}
#endif

void function loadPersistentData(table data)
{
    foreach(string key, var value in data)
    {
        print("key " + key + " value " + value)
    }
    if(data.version != FRAMEWORK_VERSION)
    {
        int version 
        array<string> nums = split(FRAMEWORK_VERSION, ".")
        foreach(int index, string num in nums)
        {
            version += num.tointeger()*10^(nums.len() - index)
        }
        int oldVersion
        nums = split(data.version, ".")
        foreach(int index, string num in nums)
        {
            oldVersion += num.tointeger()*10^(nums.len() - index)
        }
        print("old version " + oldVersion + " new version " + version)
        if(oldVersion < version)
            notify = 2 //framework has been updated
        if(oldVersion > version)
            notify = 3 //framework has been downgraded, probably by a mod manager
    }
    if(notify == -1)
    {
        notify = 0
    }
    print("Loading framework persistentData")
    if(data.moddedSelected != null)
    {
        clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex = expect string(data.moddedSelected)
    }
    else
    {
        clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex = ""
    }
    foreach(string loadout in NSGetAllFiles() )
    {
        if(loadout == "frameworkCFG.json" || loadout == "frameworkXP.json")
        {
            continue
        }
        string loadoutType = split(loadout, "_")[0]
        print("Found loadout: " + loadout + " of type: " + loadoutType)
        if(loadoutType == "T")
        {
            print("Loading titan loadout: " + loadout)
            clientframeworkPersistentTitanLoadouts.filesToLoad.append(loadout)
            NSLoadJSONFile( loadout, LoadPersistentTitanLoadout )
        }
        else if(loadoutType == "P")
        {
            print("Loading pilot loadout: " + loadout)
            clientframeworkPersistentPilotLoadouts.filesToLoad.append(loadout)
            NSLoadJSONFile( loadout, LoadPersistentPilotLoadout )
        }
    }

    thread InitialClientsideTitanValidation()
    thread ClientSideLoadoutSetup()
    #if CLIENT
        thread InformFrameworkLoadouts()
    #endif
}

void function CreateNewTitanLoadout(bool callback = false)
{
    frameworkHelperValues.savingNewLoadout = true
    if(!callback)
    {
    #if UI
        RunClientScript("CreateNewTitanLoadout", true)
    #endif
    #if CLIENT
        RunUIScript("CreateNewTitanLoadout", true)//Realistically this will only ever be called by ui, but just in case
    #endif

    }
    if(!callback)
        thread saveNewTitanLoadout(createClientFrameworkLoadoutFromLoadoutDef(GetDefaultTitanLoadout(0)) , callback)
    else
        saveNewTitanLoadout(createClientFrameworkLoadoutFromLoadoutDef(GetDefaultTitanLoadout(0)) , callback)
}
void function saveNewTitanLoadout(frameworkPersistentTitanLoadout loadout, callback = false)
{
    int i = 0
    clientframeworkPersistentTitanLoadouts.loadoutsToSave.append(loadout)
    while(clientframeworkPersistentTitanLoadouts.loadoutsToSave[0] != loadout)
    {
        printt("Waiting for mutex", clientframeworkPersistentTitanLoadouts.loadoutsToSave[0].loadoutName)
        WaitFrame() //when the shitty mutex is sus
    }
    array<string> loadouts
    if(!callback)
    {
        loadouts = NSGetAllFiles()
        loadouts.removebyvalue("frameworkCFG.json")
        loadouts.removebyvalue("frameworkXP.json")
    }
    else
    {
        foreach(string existingClientLoadoutName, frameworkPersistentTitanLoadout existingClientLoadout in clientframeworkPersistentTitanLoadouts.loadouts)
        {
            loadouts.append(existingClientLoadoutName)
        }
        
    }
    loadouts.sort(SortFrameworkTitanLoadoutsByName)
    foreach(string existingLoadout in loadouts){
        print(existingLoadout)
        string loadoutType = split(existingLoadout, "_")[0]
        if(loadoutType != "T")
            continue
        if(existingLoadout == "T_LOADOUT_" + i + ".json")
            i++
        else
            break
    }
    table loadoutTable
    loadoutTable.loadoutName <- loadout.loadoutName
    loadoutTable.titanName <- loadout.titanName
    loadoutTable.sourceMod <- loadout.sourceMod
    loadoutTable.sourceModVersion <- loadout.sourceModVersion
    loadoutTable.loadout <- TitanLoadoutDefToTable(loadout.loadout)
    loadoutTable.additionalVars <- loadout.additionalVars
    loadoutTable.fileName <- ("T_LOADOUT_" + i + ".json")
    if(!callback)
    {
        NSSaveJSONFile(expect string(loadoutTable.fileName), loadoutTable) // callback implies we have already run this, dont save twice
    }
    loadout.fileName = ("T_LOADOUT_" + i + ".json")
    clientframeworkPersistentTitanLoadouts.loadouts["T_LOADOUT_" + i + ".json"] <- loadout
    clientframeworkPersistentTitanLoadouts.loadoutsToSave.remove(0)
    frameworkHelperValues.savingNewLoadout = false
    //setModdedTitanLoadoutIndex("LOADOUT_" + i + ".json", true)
}
void function saveTitanLoadout(frameworkPersistentTitanLoadout loadout)
{
    table loadoutTable
    loadoutTable.loadoutName <- loadout.loadoutName
    loadoutTable.titanName <- loadout.titanName
    loadoutTable.sourceMod <- loadout.sourceMod
    loadoutTable.sourceModVersion <- loadout.sourceModVersion
    loadoutTable.loadout <- TitanLoadoutDefToTable(loadout.loadout)
    loadoutTable.additionalVars <- loadout.additionalVars
    loadoutTable.fileName <- loadout.fileName
    NSSaveJSONFile(loadout.fileName, loadoutTable)
    clientframeworkPersistentTitanLoadouts.loadouts[loadout.fileName] <- loadout
}
void function DeleteFrameworkTitanLoadout(string fileName, bool callback = false)
{
    if(fileName in clientframeworkPersistentTitanLoadouts.loadouts) //Might be deleted already just for funky ui stuff
        delete clientframeworkPersistentTitanLoadouts.loadouts[fileName]
    
    if(!callback)
    {
        #if UI
            RunClientScript("DeleteFrameworkTitanLoadout", fileName, true)
        #endif
        #if CLIENT
            RunUIScript("DeleteFrameworkTitanLoadout", fileName, true)//Realistically this will only ever be called by ui, but just in case
        #endif
        NSDeleteFile(fileName)
    }

    
}
void function setFrameworkPilotOverride(int index, string property, string value, bool callback = false)
{
    //TODO: Validation
    array<string> modTypes = ["Mod1", "Mod2", "Mod3", "SkinIndex", "CamoIndex"]
    if(index > NUM_PERSISTENT_PILOT_LOADOUTS)
        return
    clientframeworkPersistentPilotLoadouts.loadouts[index].loadout[property] <- value
    switch(property)
    {
        case "primary":
        case "secondary":
        case "weapon3":
            foreach(string modType in modTypes)
            {
                clientframeworkPersistentPilotLoadouts.loadouts[index].loadout[property + modType] <- "none"
            }
        case "primary":
            {
                clientframeworkPersistentPilotLoadouts.loadouts[index].loadout["primaryAttachment"] <- "none"
            }
    }
    if(!callback)
    {
        #if UI
            RunClientScript("setFrameworkPilotOverride", index, property, value, true)
        #endif
        #if CLIENT
            RunUIScript("setFrameworkPilotOverride", index, property, value, true)//Realistically this will only ever be called by ui, but just in case
        #endif
        table saveTable
        saveTable.fileName <- "P_LOADOUT_" + index + ".json"
        saveTable.loadout <- {}
        foreach(string key, string value in clientframeworkPersistentPilotLoadouts.loadouts[index].loadout )
        {
            saveTable.loadout[key] <- value
        }
        NSSaveJSONFile("P_LOADOUT_" + index + ".json", saveTable)
    }
    #if CLIENT
    DescribeNewPilotLoadoutToServer(clientframeworkPersistentPilotLoadouts.loadouts[index], index)//TODO: Should make a different function to change specific properties
    #endif
}
void function removeFrameworkPilotOverride(int index, string property, bool callback = false)
{
    if(index > NUM_PERSISTENT_PILOT_LOADOUTS || !(property in clientframeworkPersistentPilotLoadouts.loadouts[index].loadout))
        return
    array<string> modTypes = ["Mod1", "Mod2", "Mod3", "SkinIndex", "CamoIndex"]
    delete clientframeworkPersistentPilotLoadouts.loadouts[index].loadout[property]
    switch(property)
    {
        case "primary":
        case "secondary":
        case "weapon3":
            foreach(string modType in modTypes)
            {
                if(property + modType in clientframeworkPersistentPilotLoadouts.loadouts[index].loadout)
                    delete clientframeworkPersistentPilotLoadouts.loadouts[index].loadout[property + modType]
            }
        case "primary":
            {
                if("primaryAttachment" in clientframeworkPersistentPilotLoadouts.loadouts[index].loadout)
                    delete clientframeworkPersistentPilotLoadouts.loadouts[index].loadout["primaryAttachment"]
            }
    }
    if(!callback)
    {
        #if UI
            RunClientScript("removeFrameworkPilotOverride", index, property, true)
        #endif 
        #if CLIENT
            RunUIScript("removeFrameworkPilotOverride", index, property, true)//Realistically this will only ever be called by ui, but just in case
        #endif
        table saveTable
        saveTable.fileName <- "P_LOADOUT_" + index + ".json"
        saveTable.loadout <- {}
        foreach(string key, string value in clientframeworkPersistentPilotLoadouts.loadouts[index].loadout )
        {
            saveTable.loadout[key] <- value
        }
        NSSaveJSONFile("P_LOADOUT_" + index + ".json", saveTable)
    }
}
void function setFrameworkTitanLoadoutValue( string fileName, string property, string value, bool callback = false)
{
    frameworkPersistentTitanLoadout loadout = clientframeworkPersistentTitanLoadouts.loadouts[fileName]
    table<string, bool functionref(string value, string property, TitanLoadoutDef acceptedLoadout)> validation
    if(GetModdedTitanClasses().contains(loadout.titanName))
    {
        validation = GetModdedTitanData(loadout.titanName).derivedData.PersistentValuesValidation
    }
    else if(IsBaseTitan(loadout.titanName))
    {
        validation = getBaseLoadoutValidationTable()
    }
    if(property in validation)
    {
        if(validation[property](value, property, loadout.loadout))
        {
            printt("setting" + " " + property + " " + value + " for " + loadout.loadoutName + " from " + loadout.sourceMod + " " + loadout.sourceModVersion + " in " + fileName + " with callback " + ( callback ? "true" : "false" ) )
            if(!TrySetTitanLoadoutValue(loadout.loadout, property, value))
            {
                loadout.additionalVars[property] <- value
            }
            UpdateDerivedFrameworkLoadoutValues(loadout)
            if(!callback)//Sync with UI
            {
                #if UI
                RunClientScript( "setFrameworkTitanLoadoutValue", fileName, property, value, true)
                #endif
                #if CLIENT
                RunUIScript( "setFrameworkTitanLoadoutValue", fileName, property, value, true)
                #endif
            }
            else//This is weird since it means we call server on the callback instead of the original call, but I would like to call server at the same time as I save to IO
            {
                saveTitanLoadout(loadout)
                #if UI//Sync with server

                ClientCommand("SetFrameworkTitanLoadoutValue" + " " + fileName + " " + property + " " + value)
                #endif
                #if CLIENT
                GetLocalClientPlayer().ClientCommand("SetFrameworkTitanLoadoutValue" + " " + fileName + " " + property + " " + value)
                #endif 
            }
            if(loadout.response.status == eLoadoutStatus.REJECTED)
            {
                if(loadout.response.reason == "CLIENT_LOADOUT_REJECTED_VALUE_DOES_NOT_EXIST")//TODO: Use enums as string comparison is slow and cringe
                {//TODO: Make server also repeat validation both to prevent cheating and allow loadouts that have corrected bad values
                    if(loadout.response.cause == property)
                    {
                        loadout.response.status = eLoadoutStatus.ACCEPTED
                        loadout.response.reason = ""
                        loadout.response.cause = ""
                        loadout.response.badValue = ""
                    }
                }
                if(loadout.response.reason == "#FAILEDVALIDATION")
                {
                    if(loadout.response.cause == property)
                    {
                        loadout.response.status = eLoadoutStatus.NO_RESPONSE
                        loadout.response.reason = ""
                        loadout.response.cause = ""
                        loadout.response.badValue = ""
                        #if CLIENT
                        DescribeNewTitanLoadoutToServer(loadout)//Reattempt validation from server
                        #endif
                    }
                }
            }
        }
        else
        {
            printt("failed validation", property, value)
        }
    }
    else
    {
        printt("Invalid property", property)
    }
}
void function SetFrameworkTitanloadoutName( string fileName, string newName, bool callback = false)
{
    if(!callback)
    {
        #if UI
        RunClientScript( "SetFrameworkTitanloadoutName", fileName, newName, true)
        #endif
        #if CLIENT
        RunUIScript( "SetFrameworkTitanloadoutName", fileName, newName, true)
        #endif
    }

    print("Renaming " + fileName + " to " + newName + " with callback " + ( callback ? "true" : "false" ) )

    frameworkPersistentTitanLoadout loadout = clientframeworkPersistentTitanLoadouts.loadouts[fileName]
    loadout.loadoutName = newName
    saveTitanLoadout(loadout)
}

void function setFrameworkTitanLoadoutValueCallback(entity player, string fileName, string property, string value, bool callback = false)
{
    setFrameworkTitanLoadoutValue(fileName, property, value, true)
}
void function LoadPersistentTitanLoadout(table Table)
{
    bool contains = false
    foreach(key, value in Table){
        if(key == "fileName"){
            contains = true
        }
    }

    if (!contains)
    {
        print("No fileName in loadout") //To account for double-loading bug
        return
    }
    print("loading titan loadout from json " + expect string(Table["fileName"]))
    frameworkPersistentTitanLoadout loadout
    loadout.loadoutName = expect string(Table["loadoutName"])
    loadout.titanName = expect string(Table["titanName"])
    loadout.sourceMod = expect string(Table["sourceMod"])
    loadout.sourceModVersion = expect string(Table["sourceModVersion"])
    loadout.fileName = expect string(Table["fileName"])
    TableToTitanLoadoutInplace(loadout.loadout, expect table( Table["loadout"] ) )
    loadout.additionalVars = expect table( Table["additionalVars"] )
    loadout.loadout.frameworkLoadoutRef = loadout.fileName
    clientframeworkPersistentTitanLoadouts.loadouts[loadout.fileName] <- loadout
    UpdateDerivedFrameworkLoadoutValues(loadout)
    clientframeworkPersistentTitanLoadouts.filesToLoad.removebyvalue(expect string(Table["fileName"]))
}
void function LoadPersistentPilotLoadout(table Table)
{
    if( shouldPrintDevStuff() )
        PrintTable(Table)
    bool contains = false
    foreach(key, value in Table){
        if(key == "fileName"){
            contains = true
        }
    }

    if (!contains)
    {
        print("No fileName in loadout") //To account for double-loading bug
        return
    }
    array<string> modTypes = ["Mod1", "Mod2", "Mod3", "SkinIndex", "CamoIndex"]//I love creating a new identical array every time for no reason
    int index = GetModdedLoadoutNameIndex(expect string(Table["fileName"]))
    if(index >= NUM_PERSISTENT_PILOT_LOADOUTS)
    {
        printt("LoadPersistentPilotLoadout", "Loadout index out of range", index)
        return
    }
    frameworkPilotLoadoutOverrides loadout = clientframeworkPersistentPilotLoadouts.loadouts[index]
    loadout.fileName = expect string(Table["fileName"])
    table loadoutTable = expect table(Table["loadout"])
    foreach(key, value in loadoutTable )
    {
        if(!IsItemModded(expect string(value)))
        {
            printt("LoadPersistentPilotLoadout", "Invalid value", expect string(key) + " " + expect string(value))
            continue
        }
        loadout.loadout[expect string(key)] <- expect string(value)
        switch(expect string(key))
        {
            case "primary":
            case "secondary":
            case "weapon3":
                if( !ItemDefined( expect string(value) ) )
                    continue
                foreach(string modType in modTypes)
                {
                    if( !( expect string(key) + modType in loadoutTable ) )
                    {
                        loadout.loadout[(expect string(key) + modType)] <- "none"
                        continue
                    }
                    
                    if( !ItemDefined( expect string(loadoutTable[(expect string(key) + modType)] ) ) )
                    {
                        loadout.loadout[(expect string(key) + modType)] <- "none"
                        continue
                    }
                    
                    if( !HasSubitem( expect string(value), expect string(loadoutTable[(expect string(key) + modType)]) ) )
                    {
                        loadout.loadout[(expect string(key) + modType)] <- "none"
                        continue
                    }

                    if( shouldPrintDevStuff() )
                        print("Setting " + expect string(key) + modType + " to " + expect string(loadoutTable[(expect string(key) + modType)]))
                    loadout.loadout[(expect string(key) + modType)] <- expect string(loadoutTable[(expect string(key) + modType)])

                }
            case "primary":
                if("primaryAttachment" in loadout.loadout && "primaryAttachment" in loadoutTable && ItemDefined(expect string(loadoutTable["primaryAttachment"])) && HasSubitem(expect string(value), expect string(loadoutTable["primaryAttachment"])))
                {

                    loadout.loadout["primaryAttachment"] <- expect string(loadoutTable["primaryAttachment"])
                }
                else
                {
                    loadout.loadout["primaryAttachment"] <- "none"
                }
        }
    }
    foreach(string property, string override in loadout.loadout)
    {
        print("Setting " + property + " to " + override)
        
    }
    clientframeworkPersistentPilotLoadouts.filesToLoad.removebyvalue(expect string(Table["fileName"]))

}
void function SetTitanLoadoutFromClass( string titanClass, string fileName, callback = false )
{
    if(fileName == "")
	{
		print("Trying to use titan class select without a modded titan loadout selected")
	}
    print("Setting titan loadout from class " + titanClass + " " + fileName)
	frameworkPersistentTitanLoadout loadout
	if(GetModdedTitanClasses().contains(titanClass))
    {
		loadout = createClientFrameworkLoadoutFromLoadoutDef( GetModdedTitanByClassNoPersist(titanClass))
        foreach(string persistentValue, int itemType in GetModdedTitanLoadoutPassiveTypes(titanClass))
        {
            if(!TrySetTitanLoadoutValue(loadout.loadout, persistentValue, GetAllItemsOfType( itemType )[0].ref))
            {
                loadout.additionalVars[persistentValue] <- GetAllItemsOfType( itemType )[0].ref
            }
        }
        foreach(string persistentValue, CustomPersistentVar value in GetModdedTitanData(titanClass).ValidationOverrides)
        {
            if(!TrySetTitanLoadoutValue(loadout.loadout, persistentValue, value.defaultValue))
            {
                loadout.additionalVars[persistentValue] <- value.defaultValue
            }
        }
        
    }    //Major todo, make this actually use titandata instead of default style loadout def, so extra values are supported
	else if (IsBaseTitan(titanClass))
		loadout = createClientFrameworkLoadoutFromLoadoutDef( GetBaseTitanByClassNoPersist(titanClass))
	else
	{
		print("Trying to use titan class select with an invalid titan class")
		return
	}
	loadout.fileName = fileName
	saveTitanLoadout( loadout )
    #if CLIENT
    if(shouldPrintDevStuff())
        print("Updating titan model")
    UpdateTitanModel( GetLocalClientPlayer(),  GetModdedLoadoutNameIndex( fileName ) + 10 )
    #endif
    UpdateDerivedFrameworkLoadoutValues(loadout)
    if(!callback)
    {
        #if UI
        RunClientScript( "SetTitanLoadoutFromClass", titanClass, fileName, true)
        #endif
        #if CLIENT
        RunUIScript( "SetTitanLoadoutFromClass", titanClass, fileName, true)
        #endif
    }
    if(shouldPrintDevStuff())
        PrintTitanLoadout(loadout.loadout)
    #if CLIENT
    GetLocalClientPlayer().ClientCommand("setFrameworkTitanLoadoutFromClass " + fileName + " " + titanClass)
    #endif
}



void function InformFrameworkLoadouts()
{//Clientcommand limit is around 33 per second, but lets leave it at 15 to be safe
    //WaitSignal( level, "CachedLoadoutsReady" ) unneeded i think
    float timeSearching = Time()
    while(clientframeworkPersistentTitanLoadouts.filesToLoad.len() > 0)
    {
        printt("Waiting for loadouts to load")
        wait 0.1
        foreach(string fileName in clientframeworkPersistentTitanLoadouts.filesToLoad)
        {
            if(fileName in clientframeworkPersistentTitanLoadouts.loadouts)
            {
                print("Loadout " + fileName + " already loaded!")
                clientframeworkPersistentTitanLoadouts.filesToLoad.removebyvalue(fileName)
                continue
            }
            if(Time() - timeSearching > 2)
            {
                printt("Loadout " + fileName + " failed to load!, Retrying")
                NSLoadJSONFile( fileName, LoadPersistentTitanLoadout )
                timeSearching = Time()
            }
            
        }
    }

    if(clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex != "")
    {
        print("Informing server of new loadout")
        DescribeNewTitanLoadoutToServer(clientframeworkPersistentTitanLoadouts.loadouts[clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex])
    }
    int i = 0
    //foreach(frameworkPersistentTitanLoadout loadout in clientframeworkPersistentTitanLoadouts.loadouts)
    //{
    //    if(loadout.fileName == clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex)
    //    {
    //        continue
    //    }
    //    if(i > 15)
    //    {
    //        wait 1
    //        i = 0
    //        printt("Too many loadouts to inform server of")
    //    }
    //    DescribeNewTitanLoadoutToServer(loadout)
    //    i++
    //} //Literally just do the used loadout, send the rest only if used or if the server requests it
    //Do ui validation client side
}
void function InitialClientsideTitanValidation()
{
    #if CLIENT
    WaitSignal( level, "CachedLoadoutsReady" )
    #endif
    #if UI
    float timeSearching = Time()
    while(clientframeworkPersistentTitanLoadouts.filesToLoad.len() > 0 )
    {
        printt("Client validation waiting for loadouts to load")
        wait 0.1
        foreach(string fileName in clientframeworkPersistentTitanLoadouts.filesToLoad)
        {
            if(fileName in clientframeworkPersistentTitanLoadouts.loadouts)
            {
                print("Loadout " + fileName + " already loaded!")
                clientframeworkPersistentTitanLoadouts.filesToLoad.removebyvalue(fileName)
                continue
            }
            if(Time() - timeSearching > 2)
            {
                printt("Loadout " + fileName + " failed to load!, Retrying")
                NSLoadJSONFile( fileName, LoadPersistentTitanLoadout )
                timeSearching = Time()
            }
            
        }
    }
    while( !uiGlobal.loadoutsInitialized)
    {
        WaitFrame()
    }
    #endif
    foreach(frameworkPersistentTitanLoadout loadout in clientframeworkPersistentTitanLoadouts.loadouts)
    {
        bool titanDoesExist = GetModdedTitanClasses().contains(loadout.titanName) || IsBaseTitan(loadout.titanName)
        //Validation is mostly serverside, but we can do some stuff here to reduce clientside crashes
        if(!titanDoesExist && (loadout.response.status == eLoadoutStatus.NO_RESPONSE))
        {       
            loadout.response.status = eLoadoutStatus.REJECTED
            loadout.response.reason = "#CLIENT_LOADOUT_REJECTED_TITAN_DOES_NOT_EXIST"
            loadout.response.cause = "#TITANNAME"
            loadout.response.badValue = loadout.titanName
        }
        if(!ItemDefined(loadout.loadout.primary))
        {
            loadout.response.status = eLoadoutStatus.REJECTED
            loadout.response.reason = "#CLIENT_LOADOUT_REJECTED_VALUE_DOES_NOT_EXIST"
            loadout.response.cause = "primary"
            loadout.response.badValue = loadout.loadout.primary
        }
        if(loadout.response.status == eLoadoutStatus.REJECTED && loadout.fileName == clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex)
        {
            clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex = ""
            #if UI && MP
            uiGlobal.titanSpawnLoadoutIndex = GetPersistentSpawnLoadoutIndex( GetUIPlayer(), "titan" )
            #endif
            continue
        }
    }//Initial simple validation function

}
void function ClientSideLoadoutSetup()
{
    
    #if CLIENT
    WaitSignal( level, "CachedLoadoutsReady" )
    #endif //Note: Plugin implementation makes this redundant as it takes so long to load this is already triggered
    
    #if UI
    while( !uiGlobal.loadoutsInitialized)
    {
        WaitFrame()
    }
    #endif
    float timeSearching = Time()
    while(clientframeworkPersistentPilotLoadouts.filesToLoad.len() > 0 )
    {
        printt("Client validation waiting for loadouts to load")
        wait 0.1
        foreach(string fileName in clientframeworkPersistentPilotLoadouts.filesToLoad)
        {
            int index = GetModdedLoadoutNameIndex(fileName)
            if(clientframeworkPersistentPilotLoadouts.loadouts[index].fileName == fileName)
            {
                print("Loadout " + fileName + " already loaded!")
                clientframeworkPersistentPilotLoadouts.filesToLoad.removebyvalue(fileName)
                continue
            }
            if(Time() - timeSearching > 2)
            {
                printt("Loadout " + fileName + " failed to load!, Retrying")
                NSLoadJSONFile( fileName, LoadPersistentPilotLoadout )
                timeSearching = Time()
            }
            
        }
    }
    print("Setting up loadout overrides")
    entity player
    #if CLIENT
    player = GetLocalClientPlayer()
    #endif
    #if UI
    player = GetUIPlayer()
    #endif
    #if CLIENT
    int selectedIndex = GetPersistentSpawnLoadoutIndex( player, "pilot" )
    #endif
    foreach( int index, frameworkPilotLoadoutOverrides loadout in clientframeworkPersistentPilotLoadouts.loadouts)
    {
        //TODO: Validate clientside loadouts for missing mods
        foreach( string key, string value in loadout.loadout)
        {
            print("Overriding loadout value " + key + " with value " + value)

            //ResolveInvalidLoadoutChildValues( player, "pilot", index, key, value )
            SetPilotLoadoutValue( shGlobal.cachedPilotLoadouts[ index ], key, value )
        }
        #if CLIENT
        if(index == selectedIndex)
        {
            UpdatePilotModel( GetLocalClientPlayer(), selectedIndex )
        }
        #endif
        //UpdateDerivedPilotLoadoutData( shGlobal.cachedPilotLoadouts[ index ] )
        #if CLIENT
        DescribeNewPilotLoadoutToServer(loadout, index)//TODO: may hit clientcommand limit
        #endif
    }
    #if UI
    popupIfNeeded()
    #endif

}
void function ApplyPilotLoadoutOverrides(entity player, int index, PilotLoadoutDef loadout)//Clientside implementation, Serverside is at io_persistence_server.gnut:258
{
    if(index < NUM_PERSISTENT_PILOT_LOADOUTS)
    {
        foreach( string key, string value in clientframeworkPersistentPilotLoadouts.loadouts[index].loadout)
        {
            //print("Overriding loadout value " + key + " with value " + value)
            //ResolveInvalidLoadoutChildValues( player, "pilot", index, key, value )
            if(value == "none")
            {
                value = ""
            }
            SetPilotLoadoutValue( loadout, key, value )
        }
    }
}
void function DescribeNewTitanLoadoutToServer(frameworkPersistentTitanLoadout loadout)
{
    bool multicommand
    string resultString = ""
    resultString += "titanName" + " " + loadout.titanName  + " " 
    resultString += "fileName" + " " + loadout.fileName + " "
    if(clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex == loadout.fileName)
    {
        resultString += "select" + " " + "yes "
    }
    else
    {
        resultString += "select" + " " + "no "
    }
    table<string, bool functionref(string value, string property, TitanLoadoutDef acceptedLoadout)> PersistentVars
    if(GetModdedTitanClasses().contains(loadout.titanName))
    {
        print("Modded titan")
        PersistentVars = GetModdedTitanData(loadout.titanName).derivedData.PersistentValuesValidation
    }
    else if(IsBaseTitan(loadout.titanName))
    {
        print("Base titan")
        PersistentVars = getBaseLoadoutValidationTable()
    } 
    table loadoutTable = TitanLoadoutDefToTable(loadout.loadout)
    //TODO: Dynamic contextual var support
    if( "setFile" in PersistentVars)
    {
        resultString += "setFile" + " " + loadout.loadout.setFile + " "
    }
    foreach(string varName, bool functionref(string value, string property, TitanLoadoutDef acceptedLoadout) valid in PersistentVars)
    {
        if(varName == "setFile")
        {
            continue //Aldreany handled, effcts animations so should come first if it exists
        }
        if(varName in loadout.additionalVars)
            resultString += varName + " " + loadout.additionalVars[varName] + " "
        else if (varName in loadoutTable)
            resultString += varName + " " + loadoutTable[varName] + " "
        if(resultString.len() >= 400) //500 ish is the max length of a clientcommand 
        {
            resultString += "multicommand yes"
            multicommand = true
            #if CLIENT
            GetLocalClientPlayer().ClientCommand("titanFrameworkNewLoadout " + resultString)
            #endif
            #if UI
            ClientCommand("titanFrameworkNewLoadout " + resultString)
            #endif
            print("sending multicommand " + resultString)
            resultString = "titanName " + loadout.titanName + " fileName " + loadout.fileName + " select " + ( clientframeworkPersistentTitanLoadouts.moddedLoadoutIndex == loadout.fileName ? "yes " : "no ")  + "multicommand continue "
        }
    }
    printt("resultString", resultString)
    if(shouldPrintDevStuff())
    {    
        PrintTable(loadoutTable)
        PrintTable(loadout.additionalVars)
    }
    print(resultString.len())
    //TODO: Improve multicommand support incase its recieved by the server in the wrong order
    #if CLIENT
    GetLocalClientPlayer().ClientCommand("titanFrameworkNewLoadout " + resultString) 
    #endif
    #if UI
    ClientCommand("titanFrameworkNewLoadout " + resultString)
    #endif
}//script_client thread DescribeNewTitanLoadoutToServer(clientframeworkPersistentTitanLoadouts.loadouts["LOADOUT_0.json"])
void function DescribeNewPilotLoadoutToServer(frameworkPilotLoadoutOverrides loadoutOverrides, int index)
{
    string resultstring = "pilot " + index + " "
    foreach(string key, string value in loadoutOverrides.loadout)
    {
        resultstring += key + " " + value + " "
    }
    GetLocalClientPlayer().ClientCommand("FrameworkNewPilotLoadout " + resultstring)
    print("FrameworkNewPilotLoadout " + resultstring)
}