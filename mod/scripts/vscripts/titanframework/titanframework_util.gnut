global function PreInit
global function FrameworkInit
global function GetModdedTitanClasses
global function GetModdedTitanByClassNoPersist
global function GetBaseTitanByClassNoPersist
global function IsBaseTitan
global function GetAllTitanByClassNoPersist
//global function GetModdedTitanByIndexNoPersist
//global function GetModdedTitansByIndexNoPersist
global function GetModdedTitansByClassNoPersist
global function OverwriteGlobalTitanLoadoutByIndex
global function GetModdedTitanClassForMods
global function GetModdedTitanSetFileForAnims
global function GetModdedTitansSetFileForAnims
global function GetModdedTitanExecutionTypeByClass
global function GetModdedTitanLoadoutPassiveType
global function GetModdedTitanLoadoutPassiveTypeByClass
global function GetModdedTitanLoadoutContextualPassiveTypeByContext
global function GetModdedTitanLoadoutPassiveTypes
global function OverwriteModdedTitanLoadoutDefaultEquipment
global function OverwriteDefaultTitanLoadoutByIndex
global function RegisterModdedTitan
global function RegisterModdedTitanItems
global function ModdedTitanHasPassiveSlot
global function RegisterModdedTitanCustomPassiveType
global function GenerateModdedTitanPassiveStringForPersistence
global function GetModdedTitanPassiveStringForPersistence
global function GetModdedTitanPassiveStringForPersistenceInverted
global function DevGetPassivePersistentConversionTable
global function GetModdedTitanPassivePersistentType
global function RegisterModdedTitanItemsSimple
global function CreateModdedTitanSimple
global function GetmoddedPassiveTypeDisplayName
global function GetModdedTitanReadyMessage
global function GetTitanEditLoadoutMenu
global function ModdedTitanPassiveHasCustomAssets
global function TitanHasForcedItemsForType
global function TitanHasFindFunctionForType
global function GetTitanForcedItemsForType
global function GetTitanFindFunctionForType
global function TitanClassHasAltTitans
//global function GetModdedTitanFDPassiveArray
global function GetModdedTitanPassiveHasAsset
global function GetHintForModdedTitanLoadout
global function GetModdedTitanPreviewController

global function shouldPrintDevStuff //This is actually not deprecated :)
global function DevForceNoValidation//You wouldnt believe it, but this is also deprecated
global function DevPrintTitanLoadoutPersistentDebug//Guess what, also deprecated
#if SERVER
global function debugNullTitanLoadout//Deprecated
global function SetTitanLoadout//Deprecated
#endif 
#if CLIENT
global function ForceUpdateClientPetTitanLoadout
global function ForceUpdateClientPetTitanLoadoutVanilla
global function GetClientActivePetLoadout
#endif


table<string, TitanLoadoutDef> TitanLoadoutByClass
table<string, TitanLoadoutDef> BaseTitanLoadoutByClass
table<string, TitanLoadoutDef> ModdedTitanLoadoutByClass
table<int, TitanLoadoutDef> TitanLoadoutByIndex
table<string, string> TitanClassModsToUse //Used for alot, but not actually used for passives
table<string, string> TitanSetFilesForAnims
// Used for other things
table<string, int> TitanPassiveTypesByRef
table<int, int> TitanExecutionsByIndex
table<string, table<string, int> > TitanPassiveTypesBySetFile
table<string, table<string, int> > TitanPassiveTypesByClass
table<string, int> ModdedTitanExtraPassiveTypes
table<string, table<string, table <string, string > > > ModdedTitanCustomPassivePersistentNames
table<string, table<string, table <string, string > > > ModdedTitanCustomPassivePersistentNamesInverted
table<int, int > ModdedTitanPassivePersistentType
table<int, string> ModdedPassiveTypeDisplayNames
table<string, table<string, bool> > ModdedTitanPassiveHasAsset
table<string, string> ModdedTitanReadyMessage
table<string, array<string> > ModdedTitanHints
table<string, string> TitanEditLoadoutMenu
table<string, table<int, array<ItemData> > > ForcedItemsForItemTypeAndClass 
array<string> TitansNeedingSetFileFixup//Deprecated
table<string, void functionref(array<var> icons, string ref) > TitanPreviewControllersByClass
table<string, table<int, array<ItemData> functionref(string property, TitanLoadoutDef validatedLoadout) > > TitanFindFunctionsForItemType //I should really not be trusted with a computer
//table<string, array<ItemDisplayData> ModdedTitanFDUpgrades

bool function shouldPrintDevStuff()
{
	return GetConVarInt("titanFrameworkDevPrintsEnabled") >=1
}
bool function DevForceNoValidation()
{
	return GetConVarInt("titanFrameworkSkipVal") == 1
}
void function DevPrintTitanLoadoutPersistentDebug(entity player, int index)
{
	TitanLoadoutDef loadout
	PopulateTitanLoadoutFromPersistentData(player, loadout, index)
	printt          ( "TITAN LOADOUT:"                                                            )
	printt          ( "    PERSISTENT DATA:                                           GAME DATA:" )
	printt          ( "        name               " + GetPersistentLoadoutValue( player, "titan", index, "name" ) + "                     \"" + loadout.name + "\""                     )
	printt          ( "        titanClass         " + GetPersistentLoadoutValue( player, "titan", index, "titanClass" ) + "                              \"" + loadout.titanClass + "\""               )
	printt          ( "        setFile                                                  \"" + loadout.setFile + "\""                  )
	printt          ( "        primeTitanRef                                            \"" + loadout.primeTitanRef + "\""            )
	printt          ( "        primaryMod         " + GetPersistentLoadoutValue( player, "titan", index, "primaryMod" ) + "               \"" + loadout.primaryMod + "\""               )
	printt          ( "        special            " + GetPersistentLoadoutValue( player, "titan", index, "special" ) + "         \"" + loadout.special + "\""                  )
	printt          ( "        antirodeo          " + GetPersistentLoadoutValue( player, "titan", index, "antirodeo" ) + "                 \"" + loadout.antirodeo + "\""                )
	printt          ( "        passive1           " + GetPersistentLoadoutValue( player, "titan", index, "passive1" ) + "                 \"" + loadout.passive1 + "\""                 )
	printt          ( "        passive2           " + GetPersistentLoadoutValue( player, "titan", index, "passive2" ) + "                 \"" + loadout.passive2 + "\""                 )
	printt          ( "        passive3           " + GetPersistentLoadoutValue( player, "titan", index, "passive3" ) + "                 \"" + loadout.passive3 + "\""                 )
	printt          ( "        passive4           " + GetPersistentLoadoutValue( player, "titan", index, "passive4" ) + "                 \"" + loadout.passive4 + "\""                 )
	printt          ( "        passive5           " + GetPersistentLoadoutValue( player, "titan", index, "passive5" ) + "                 \"" + loadout.passive5 + "\""                 )
	printt          ( "        passive6           " + GetPersistentLoadoutValue( player, "titan", index, "passive6" ) + "                 \"" + loadout.passive6 + "\""                 )
	printt          ( "        skinIndex          " + GetPersistentLoadoutValue( player, "titan", index, "skinIndex" ) + "                 " + loadout.skinIndex                         )
	printt          ( "        camoIndex          " + GetPersistentLoadoutValue( player, "titan", index, "camoIndex" ) + "                 " + loadout.camoIndex                         )
	printt          ( "        decalIndex         " + GetPersistentLoadoutValue( player, "titan", index, "decalIndex" ) + "                 " + loadout.decalIndex                        )
	printt          ( "        primarySkinIndex   " + GetPersistentLoadoutValue( player, "titan", index, "primarySkinIndex" ) + "           " + loadout.primarySkinIndex                  )
	printt          ( "        primaryCamoIndex   " + GetPersistentLoadoutValue( player, "titan", index, "primaryCamoIndex" ) + "           " + loadout.primaryCamoIndex                  )
	printt          ( "        isPrime            " + GetPersistentLoadoutValue( player, "titan", index, "isPrime" ) + "   \"" + loadout.isPrime + "\""                  )
	printt          ( "        primeSkinIndex     " + GetPersistentLoadoutValue( player, "titan", index, "primeSkinIndex" ) + "            " + loadout.primeSkinIndex                    )
	printt          ( "        primeCamoIndex     " + GetPersistentLoadoutValue( player, "titan", index, "primeCamoIndex" ) + "            " + loadout.primeCamoIndex                    )
	printt          ( "        primeDecalIndex    " + GetPersistentLoadoutValue( player, "titan", index, "primeDecalIndex" ) + "            " + loadout.primeDecalIndex                   )
	printt          ( "    DERIVED DATA:"         )
	print           ( "        setFileMods        " )
	PrintStringArray( loadout.setFileMods          )
	printt          ( "        melee                 \"" + loadout.melee + "\""                    )
	printt          ( "        coreAbility           \"" + loadout.coreAbility + "\""              )
	printt          ( "        primary               \"" + loadout.primary + "\""                  )
	printt          ( "        primaryAttachment     \"" + loadout.primaryAttachment + "\""        )
	print           ( "        primaryMods        "  )
	PrintStringArray( loadout.primaryMods                                                         )
	printt          ( "        ordnance           \"" + loadout.ordnance + "\""                 )
	print           ( "        ordnanceMods         "                                             )
	PrintStringArray( loadout.ordnanceMods                                                        )
	print           ( "        specialMods          "                                             )
	PrintStringArray( loadout.specialMods                                                         )
	print           ( "        antirodeoMods        "                                             )
	PrintStringArray( loadout.antirodeoMods                                                       )
}
#if SERVER
void function debugNullTitanLoadout(entity player, int index)
{
	DevPrintTitanLoadoutPersistentDebug(player, index)
	TitanLoadoutDef loadout
	SetPersistentTitanLoadout(player, index, loadout)
	DevPrintTitanLoadoutPersistentDebug(player, index)
}
#endif
//Getters
void functionref(array<var> icons, string ref) function GetModdedTitanPreviewController(string titanClass)
{
	if(!(titanClass in TitanPreviewControllersByClass))
		return null //Preview controller default is set in Registermoddedtitan so this shouldnt happen unless the titan doesnt exist
	return TitanPreviewControllersByClass[titanClass]
}
bool function TitanClassHasAltTitans(string titanClass)
{
	if(IsBaseTitan(titanClass))
		return false
	if(!ModdedTitanClasses.contains(titanClass))
		return false
	return GetModdedTitanData(titanClass).altChassisType == frameworkAltChassisMethod.ALT_TITAN
}
bool function TitanHasForcedItemsForType(string titan, int itemType)
{
	if(titan in ForcedItemsForItemTypeAndClass)
		return itemType in ForcedItemsForItemTypeAndClass[titan]

	return false
}
array<ItemData> function GetTitanForcedItemsForType(string titan, int itemType)
{
	if(titan in ForcedItemsForItemTypeAndClass)
	{
		if(itemType in ForcedItemsForItemTypeAndClass[titan])
		{
			return ForcedItemsForItemTypeAndClass[titan][itemType]
		}
	}
	unreachable
}
bool function TitanHasFindFunctionForType(string titan, int itemType)
{
	if(titan in TitanFindFunctionsForItemType)
		return itemType in TitanFindFunctionsForItemType[titan]
	return false
}
array<ItemData> functionref(string property, TitanLoadoutDef titan) function GetTitanFindFunctionForType(string titan, int itemType)
{
	if(titan in TitanFindFunctionsForItemType)
	{
		if(itemType in TitanFindFunctionsForItemType[titan])
		{
			return TitanFindFunctionsForItemType[titan][itemType]
		}
	}
	unreachable
}
string function GetTitanEditLoadoutMenu( string titanClass )
{
	if( titanClass in TitanEditLoadoutMenu )
		return TitanEditLoadoutMenu[titanClass]
	return "EditTitanLoadoutMenu"
}
string function GetHintForModdedTitanLoadout(string name)
{
	if(name in ModdedTitanHints)
	{
		return ModdedTitanHints[name][RandomInt(ModdedTitanHints[name].len())]
	}
	return ""
}
bool function ModdedTitanPassiveHasCustomAssets(string titan, string itemType)
{
	if(titan in ModdedTitanPassiveHasAsset && itemType in ModdedTitanPassiveHasAsset[titan])
		return ModdedTitanPassiveHasAsset[titan][itemType]
	//if(shouldPrintDevStuff())
	//	print("not in")
	return false
}

table<string, table<string, bool> > function GetModdedTitanPassiveHasAsset()
{
	return ModdedTitanPassiveHasAsset
}
string function GetModdedTitanReadyMessage(string titan)
{
	if(titan in ModdedTitanReadyMessage)
		return ModdedTitanReadyMessage[titan]
	return ""
}
string function GetmoddedPassiveTypeDisplayName(int id)
{
	if(id in ModdedPassiveTypeDisplayNames)
		return ModdedPassiveTypeDisplayNames[id]
	return ""
}
bool function ModdedTitanHasPassiveSlot(string titanClass, string slot)
{
	if(!(titanClass in TitanPassiveTypesByClass))
		return false
	//int extras = ModdedTitanExtraPassiveTypes[titanClass]
	//switch(slot)
	//{
	//	case"passive6":
	//		return(extras >= 3)
	//	case "passive5":
	//		return(extras >= 2)
	//	case "passive4":
	//		return(extras >= 1)
	//	default:
	//		return false
	//}
	//return false //bro what the fuck was i thinking

	return slot in TitanPassiveTypesByClass[titanClass]
}
int function GetModdedTitanPassivePersistentType(int passiveType)
{
	if(!(passiveType in ModdedTitanPassivePersistentType))
	{
		return passiveType
	}
	return ModdedTitanPassivePersistentType[passiveType]
}
int function GetModdedTitanLoadoutPassiveType(string ref, string property)
{
	if(ref in TitanPassiveTypesBySetFile)
	{
		return TitanPassiveTypesBySetFile[ref][property]
	}
	return -1
}
int function GetModdedTitanLoadoutPassiveTypeByClass(string ref, string property)
{
	if(ref in TitanPassiveTypesByClass && property in TitanPassiveTypesByClass[ref])
	{
		return TitanPassiveTypesByClass[ref][property]
	}
	return -1
}
table<string, int> function GetModdedTitanLoadoutPassiveTypes(string titanClass)
{
	if(!(titanClass in TitanPassiveTypesByClass))
		return {}
	return TitanPassiveTypesByClass[titanClass]
}
int function GetModdedTitanLoadoutContextualPassiveTypeByContext(TitanLoadoutDef loadout, string property) //TODO: Rework this system to use frameworkPersistentTitanLoadout
{
	ModdedTitanData data = GetModdedTitanData(loadout.titanClass)
	if(data.altChassisType == frameworkAltChassisMethod.ALT_TITAN && property == "titanExecution")
	{
		foreach( FrameworkChassisStruct chassisInstance in data.altChassisArray )
		{
			if(chassisInstance.setFile == loadout.setFile)
			{
				return chassisInstance.executionAnimationType
			}
		}
	}
	return GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, property)
}
int function GetModdedTitanExecutionTypeByClass(string titanClass)
{
	return TitanExecutionsByIndex[titanClass]
}
TitanLoadoutDef function GetModdedTitanByClassNoPersist(string titanClass)
{
	return ModdedTitanLoadoutByClass[titanClass]
}
TitanLoadoutDef function GetBaseTitanByClassNoPersist(string titanClass)
{
	return BaseTitanLoadoutByClass[titanClass]
}
bool function IsBaseTitan(string titanClass)
{
	if( titanClass in BaseTitanLoadoutByClass )
		return true
	switch (titanClass) //This is a hack, not sure why its needed but i think some stuff isnt being loaded in time
	{
		case"northstar":
		case"ion":
		case"ronin":
		case"scorch":
		case"tone":
		case"legion":
		case"monarch":
			return true
	}
	return false
}
TitanLoadoutDef function GetAllTitanByClassNoPersist(string titanClass)
{
	return TitanLoadoutByClass[titanClass]
}
TitanLoadoutDef function GetModdedTitanByIndexNoPersist(int index)
{
	return TitanLoadoutByIndex[index]
}
table<int, TitanLoadoutDef>  function GetModdedTitansByIndexNoPersist()
{
	return TitanLoadoutByIndex
}
table<string, TitanLoadoutDef>  function GetModdedTitansByClassNoPersist()
{
	return ModdedTitanLoadoutByClass
}
string function GetModdedTitanClassForMods(string index)
{
	if(index in TitanClassModsToUse)
		return TitanClassModsToUse[index]
	return index
}
table<string,string> function GetModdedTitansSetFileForAnims()
{
	return TitanSetFilesForAnims
}
string function GetModdedTitanSetFileForAnims(string key)
{
	if(key in TitanSetFilesForAnims)
		return TitanSetFilesForAnims[key]
	//print("did NOT change setfile========")
	return key
}
#if SERVER
bool function SetPlayerTitanRemote(entity player, array<string> args)
{
	if(args[1] == "modded")
	{
		if(!GetModdedTitanClasses().contains(args[2]))
		{
			print("AWW HELL NAW" +args[2])
			return false
		}
		SetTitanLoadout(player, args[0].tointeger(), GetModdedTitanByClassNoPersist(args[2])) //I should not thread this but it makes it less likely to net chan
	}
	else if(args[1] == "default")
	{
		if(!(args[2] in BaseTitanLoadoutByClass))
		{
			print("AWW HELL NAW" +args[2])
			return false
		}
		SetTitanLoadout(player, args[0].tointeger(), BaseTitanLoadoutByClass[args[2]])	
	}

	return true
}
void function SetTitanLoadout(entity player, int index, TitanLoadoutDef loadout)
{
	if(index < 7)
	{
		
		print("Should not modify default titans. Do so manually if you want to at your own risk")
		return

	}
	if(loadout.name in ModdedTitanLoadoutByClass)//Modded titans
	{
		SetPersistentLoadoutValue( player, "titan", index, "name",				loadout.name )
		SetPersistentLoadoutValue( player, "titan", index, "isPrime",				loadout.isPrime )
		SetPersistentLoadoutValue( player, "titan", index, "titanClass",		GetModdedTitanClassForMods(loadout.name) )
		SetPersistentLoadoutValue( player, "titan", index, "passive1",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive1"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "passive2",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive2"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "passive3",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive3"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "passive4",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive4"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "passive5",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive5"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "passive6",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive6"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "titanExecution",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "titanExecution"))[0].ref)
		TitanLoadoutDef loadout2 = GetBaseTitanByClassNoPersist(GetModdedTitanClassForMods(loadout.name))
		SetPersistentLoadoutValue( player, "titan", index, "special",			loadout2.special)
		SetPersistentLoadoutValue( player, "titan", index, "antirodeo",			loadout2.antirodeo)
		ResetLoadoutPropertyToDefault( player, "titan", index, "skinIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "camoIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "decalIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primarySkinIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primaryCamoIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primeSkinIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primeCamoIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primeDecalIndex" )
		//GetSetFileModsForSettingType( "titan", [ loadout.passive1, loadout.passive2, loadout.passive3, loadout.passive4, loadout.passive5, loadout.passive6 ] )
	}
	else if(loadout.titanClass in TitanPassiveTypesByClass)//None modded titans
	{
		SetPersistentLoadoutValue( player, "titan", index, "isPrime",				loadout.isPrime )
		SetPersistentTitanLoadout(player, index, loadout)
		ResetLoadoutPropertyToDefault( player, "titan", index, "skinIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "camoIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "decalIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primarySkinIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primaryCamoIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primeSkinIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primeCamoIndex" )
		ResetLoadoutPropertyToDefault( player, "titan", index, "primeDecalIndex" )
	}
	else
	{
		print("Invalid titan loadout")
	}
	Remote_CallFunction_NonReplay( player, "UpdateAllCachedTitanLoadouts" )
	Remote_CallFunction_NonReplay( player, "ServerCallback_UpdateTitanModel", index )
	player.p.titanLoadoutChanged = true
	thread UpdateCachedLoadouts()
	if(shouldPrintDevStuff())
	{
		PrintTitanLoadout(GetTitanLoadoutFromPersistentData(player, index))
		PrintTitanLoadout(shGlobal.cachedTitanLoadouts[index])
	}
}
#endif
void function GenerateModdedTitanPassiveStringForPersistence(string titan, string passiveslot, string passive, int masktype = -1)
{
	if(!(titan in ModdedTitanCustomPassivePersistentNames))
		ModdedTitanCustomPassivePersistentNames[titan] <- {}

	if(!(passiveslot in ModdedTitanCustomPassivePersistentNames[titan]))
		ModdedTitanCustomPassivePersistentNames[titan][passiveslot] <- {}
	if(passive in ModdedTitanCustomPassivePersistentNames[titan][passiveslot])
	{
		print("Already registered that passive")
		return
	}
	if(shouldPrintDevStuff())
		print(passiveslot)
	int ItemType

	if(passiveslot == "passive4")
		ItemType = eItemTypes.TITAN_UPGRADE1_PASSIVE
	if(passiveslot == "passive5")
		ItemType = eItemTypes.TITAN_UPGRADE2_PASSIVE
	if(passiveslot == "passive6")
		ItemType = eItemTypes.TITAN_UPGRADE3_PASSIVE
	if(passiveslot == "passive2")
		ItemType = masktype

	if(shouldPrintDevStuff())
		print(ItemType)
	string name = GetAllItemsOfType(ItemType)[ModdedTitanCustomPassivePersistentNames[titan][passiveslot].len()].ref
	if(shouldPrintDevStuff())
		print(name)
	ModdedTitanCustomPassivePersistentNames[titan][passiveslot][passive] <- name
}
string function GetModdedTitanPassiveStringForPersistence(string titan, string passiveslot, string passive)
{
	if(!(titan in ModdedTitanCustomPassivePersistentNames))
	{
		if(shouldPrintDevStuff())
			print("titan not registered with custom to persistent index "+titan)
		return passive
	}
	if(!(passiveslot in ModdedTitanCustomPassivePersistentNames[titan]))
	{
		if(shouldPrintDevStuff())
			print("passiveslot not registered with custom to persistent index for "+titan)
		return passive
	}
	if(!(passive in ModdedTitanCustomPassivePersistentNames[titan][passiveslot]))
	{
		if(shouldPrintDevStuff())
			print("passive not registered with custom to persistent index for "+titan +" and "+passive)
		return passive
	}
	return ModdedTitanCustomPassivePersistentNames[titan][passiveslot][passive]
	
}
string function GetModdedTitanPassiveStringForPersistenceInverted(string titan, string passiveslot, string passive)
{
	if(!(titan in ModdedTitanCustomPassivePersistentNames))
		return passive
	if(shouldPrintDevStuff())
		print("titan exists "+titan)
	if(!(passiveslot in ModdedTitanCustomPassivePersistentNames[titan]))
		return passive
	if(shouldPrintDevStuff())
		print("passivetype exists "+passiveslot)
	foreach(string key, string value in ModdedTitanCustomPassivePersistentNames[titan][passiveslot])
	{
		if( value == passive )
			return key
	}
	print("Passive not found "+passive )
	return passive
	
}
table<string, table<string, table<string, string> > > function DevGetPassivePersistentConversionTable()
{
	return ModdedTitanCustomPassivePersistentNames
}
void function PreInit()
{
	#if SERVER || CLIENT
	AddCallback_OnRegisteringCustomNetworkVars( RegisterFrameworkNetworkVar )
	#endif
	PreInitGlobal()
	#if CLIENT
	AddServerToClientStringCommandCallback("UpdateTeamTitanSelectionString", ServerCallback_UpdateTeamTitanSelectionString )
	#endif
	RegisterTitanPassiveTypes("titan_ogre_meteor", eItemTypes.TITAN_SCORCH_PASSIVE,eItemTypes.TITAN_SCORCH_EXECUTION, "scorch")
	RegisterTitanPassiveTypes("titan_atlas_stickybomb", eItemTypes.TITAN_ION_PASSIVE, eItemTypes.TITAN_ION_EXECUTION, "ion")
	RegisterTitanPassiveTypes("titan_atlas_tracker", eItemTypes.TITAN_TONE_PASSIVE,eItemTypes.TITAN_TONE_EXECUTION, "tone")
	RegisterTitanPassiveTypes("titan_ogre_minigun", eItemTypes.TITAN_LEGION_PASSIVE,eItemTypes.TITAN_LEGION_EXECUTION, "legion")
	RegisterTitanPassiveTypes("titan_stryder_sniper", eItemTypes.TITAN_NORTHSTAR_PASSIVE,eItemTypes.TITAN_NORTHSTAR_EXECUTION, "northstar")
	RegisterTitanPassiveTypes("titan_stryder_leadwall", eItemTypes.TITAN_RONIN_PASSIVE,eItemTypes.TITAN_RONIN_EXECUTION, "ronin")
	RegisterTitanPassiveTypes("titan_atlas_vanguard", eItemTypes.TITAN_VANGUARD_PASSIVE,eItemTypes.TITAN_VANGUARD_EXECUTION, "vanguard",
	 eItemTypes.TITAN_UPGRADE1_PASSIVE, eItemTypes.TITAN_UPGRADE2_PASSIVE, eItemTypes.TITAN_UPGRADE3_PASSIVE)
	//RegisterTitanPassiveTypes("titan_ogre_meteor", eItemTypes.TITAN_SCORCH_PASSIVE,eItemTypes.TITAN_SCORCH_EXECUTION, "#DEFAULT_TITAN_7")
	//RegisterTitanPassiveTypes("titan_atlas_stickybomb", eItemTypes.TITAN_ION_PASSIVE, eItemTypes.TITAN_ION_EXECUTION, "DEFAULT_TITAN_5")
	//RegisterTitanPassiveTypes("titan_atlas_tracker", eItemTypes.TITAN_TONE_PASSIVE,eItemTypes.TITAN_TONE_EXECUTION, "DEFAULT_TITAN_4")
	//RegisterTitanPassiveTypes("titan_ogre_minigun", eItemTypes.TITAN_LEGION_PASSIVE,eItemTypes.TITAN_LEGION_EXECUTION, "DEFAULT_TITAN_8")
	//RegisterTitanPassiveTypes("titan_stryder_sniper", eItemTypes.TITAN_NORTHSTAR_PASSIVE,eItemTypes.TITAN_NORTHSTAR_EXECUTION, "DEFAULT_TITAN_3")
	//RegisterTitanPassiveTypes("titan_stryder_leadwall", eItemTypes.TITAN_RONIN_PASSIVE,eItemTypes.TITAN_RONIN_EXECUTION, "DEFAULT_TITAN_2")
	//RegisterTitanPassiveTypes("titan_atlas_vanguard", eItemTypes.TITAN_VANGUARD_PASSIVE,eItemTypes.TITAN_VANGUARD_EXECUTION, "DEFAULT_TITAN_10",
	//eItemTypes.TITAN_UPGRADE1_PASSIVE, eItemTypes.TITAN_UPGRADE2_PASSIVE, eItemTypes.TITAN_UPGRADE3_PASSIVE)
	 
	
}
void function FrameworkInit()
{
	//#if SERVER
	//AddCallback_OnClientConnected(ValidatePlayerModdedData)
	//#endif
	//#if MP
	//PopulateDefaultTitanLoadouts( shGlobal.defaultTitanLoadouts )
	//#endif


	thread checkLoadoutValues()
}
void function RegisterFrameworkNetworkVar()
{
	Remote_RegisterFunction("UpdateHealthSegmentCount")//TODO
	Remote_RegisterFunction("ForceUpdateClientPetTitanLoadout")
	Remote_RegisterFunction("ForceUpdateClientPetTitanLoadoutVanilla")

}
#if CLIENT
frameworkPersistentTitanLoadout activePetTitanLoadout
void function ForceUpdateClientPetTitanLoadout(int refID)
{
	string ref = GetModdedLoadoutNameFromIndex(refID, "T", false)
	overideFrameworkTitanLoadoutWithTitanLoadout(clientframeworkPersistentTitanLoadouts.loadouts[ref], activePetTitanLoadout)
}
void function ForceUpdateClientPetTitanLoadoutVanilla(int id)
{
	frameworkPersistentTitanLoadout blank
	overrideTitanLoadoutWithTitanLoadout(blank.loadout, GetCachedTitanLoadout( id ))
	overideFrameworkTitanLoadoutWithTitanLoadout(blank, activePetTitanLoadout)
}
frameworkPersistentTitanLoadout function GetClientActivePetLoadout()
{
	return activePetTitanLoadout
}
#endif
void function checkLoadoutValues()
{
	
	#if CLIENT
	WaitSignal( level, "CachedLoadoutsReady" )
	#endif
	#if UI
	while(!uiGlobal.loadoutsInitialized)
	{
		WaitFrame() //Wait for default titanloadouts to be registered
	}
	#endif
	//#if SERVER
	//WaitSignal(level, "EndUpdateCachedLoadouts")
	//#endif
	for(int i = 0; i < 7; i++)
	{

		TitanLoadoutDef loadout = GetDefaultTitanLoadout(i)
		TitanLoadoutByClass[loadout.titanClass] <- loadout
		print(loadout.name + "=========================================")
		BaseTitanLoadoutByClass[loadout.titanClass] <- loadout
		#if UI
		AddTitanLoadoutToSelectionListSimple("base", [], loadout.titanClass)
		#endif
		
	}

}

#if SERVER
void function ValidatePlayerModdedData(entity player)
{
	for(int i = 7; i < 10; i++)
	{
		if(shouldPrintDevStuff())
			print("titan index "+i+ "name "+GetValidatedPersistentLoadoutValue( player, "titan", i, "name" ))
		
		if(GetValidatedPersistentLoadoutValue( player, "titan", i, "name" ) == ""
		|| GetValidatedPersistentLoadoutValue( player, "titan", i, "name" ) == "fuck")
		{
			print("Attempting to autofill titan index "+i)
			TitanLoadoutDef loadout = clone GetDefaultTitanLoadout( i-7)
			//loadout.passive2 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, "passive2"))[0].ref
			//loadout.passive3 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, "passive3"))[0].ref
			//loadout.passive1 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, "passive1"))[0].ref
			SetTitanLoadout(player, i, loadout)
		}
	}
}
#endif
void function RegisterTitanPassiveTypes(string SetFile, int passive2,int execution, string titanClass, int passive4 = -1, int passive5 = -1, int passive6 = -1)
{
	//TitanPassiveTypesBySetFile[SetFile] <- {} //THIS SHOULD NEVER EVER BE USED, CUSTOM SETFILES ARE RETIRED, but just incase :)
	//TitanPassiveTypesBySetFile[SetFile]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	//TitanPassiveTypesBySetFile[SetFile]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	//TitanPassiveTypesBySetFile[SetFile]["passive2"] <- passive2
	//TitanPassiveTypesBySetFile[SetFile]["passive4"] <- eItemTypes.TITAN_UPGRADE1_PASSIVE
	//TitanPassiveTypesBySetFile[SetFile]["passive5"] <- eItemTypes.TITAN_UPGRADE2_PASSIVE
	//TitanPassiveTypesBySetFile[SetFile]["passive6"] <- eItemTypes.TITAN_UPGRADE3_PASSIVE
	//TitanPassiveTypesBySetFile[SetFile]["titanExecution"] <- execution
	TitanPassiveTypesByClass[titanClass] <- {}
	TitanPassiveTypesByClass[titanClass]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["passive2"] <- passive2
	TitanPassiveTypesByClass[titanClass]["titanExecution"] <- execution
	if(passive4 != -1)
	{
		//TitanPassiveTypesBySetFile[SetFile]["passive4"]		<- passive4
		TitanPassiveTypesByClass[titanClass]["passive4"]	<- passive4
	}
	if(passive5 != -1)
	{
		//TitanPassiveTypesBySetFile[SetFile]["passive5"]		<- passive5
		TitanPassiveTypesByClass[titanClass]["passive5"]	<- passive5
	}
	if(passive6 != -1)
	{
		//TitanPassiveTypesBySetFile[SetFile]["passive6"]		<- passive6
		TitanPassiveTypesByClass[titanClass]["passive6"]	<- passive6
	}
}
void function OverwriteDefaultTitanLoadoutByIndex(int key, TitanLoadoutDef loadout)
{
	//shGlobal.cachedTitanLoadouts[ key ] = loadout
	shGlobal.defaultTitanLoadouts[ key ].name = loadout.name
	shGlobal.defaultTitanLoadouts[ key ].titanClass = loadout.titanClass
	shGlobal.defaultTitanLoadouts[ key ].setFile = loadout.setFile
	shGlobal.defaultTitanLoadouts[ key ].coreAbility = loadout.coreAbility
	shGlobal.defaultTitanLoadouts[ key ].ordnance =  loadout.ordnance
	shGlobal.defaultTitanLoadouts[ key ].special =  loadout.special
	shGlobal.defaultTitanLoadouts[ key ].antirodeo =  loadout.antirodeo
	shGlobal.defaultTitanLoadouts[ key ].voice =  loadout.voice
	shGlobal.defaultTitanLoadouts[ key ].skinIndex =  loadout.skinIndex
	shGlobal.defaultTitanLoadouts[ key ].isPrime =  loadout.isPrime
	shGlobal.defaultTitanLoadouts[ key ].primary = loadout.primary
	shGlobal.defaultTitanLoadouts[ key ].primeTitanRef = loadout.primeTitanRef
	shGlobal.defaultTitanLoadouts[ key ].difficulty = loadout.difficulty
	shGlobal.defaultTitanLoadouts[ key ].titanExecution = loadout.titanExecution
	shGlobal.defaultTitanLoadouts[ key ].passive1 = loadout.passive1
	shGlobal.defaultTitanLoadouts[ key ].passive2 = loadout.passive2
	shGlobal.defaultTitanLoadouts[ key ].passive3 = loadout.passive3
	shGlobal.defaultTitanLoadouts[ key ].passive4 = loadout.passive4
	shGlobal.defaultTitanLoadouts[ key ].passive5 = loadout.passive5
	shGlobal.defaultTitanLoadouts[ key ].passive6 = loadout.passive6
}
void function OverwriteGlobalTitanLoadoutByIndex(int key, TitanLoadoutDef loadout, bool skins = false)
{
	#if UI || CLIENT
	//shGlobal.cachedTitanLoadouts[ key ] = loadout
	shGlobal.cachedTitanLoadouts[ key ].name = loadout.name
	shGlobal.cachedTitanLoadouts[ key ].titanClass = loadout.titanClass
	shGlobal.cachedTitanLoadouts[ key ].setFile = loadout.setFile
	shGlobal.cachedTitanLoadouts[ key ].coreAbility = loadout.coreAbility
	shGlobal.cachedTitanLoadouts[ key ].ordnance =  loadout.ordnance
	shGlobal.cachedTitanLoadouts[ key ].special =  loadout.special
	shGlobal.cachedTitanLoadouts[ key ].antirodeo =  loadout.antirodeo
	shGlobal.cachedTitanLoadouts[ key ].voice =  loadout.voice
	shGlobal.cachedTitanLoadouts[ key ].skinIndex =  loadout.skinIndex
	shGlobal.cachedTitanLoadouts[ key ].isPrime =  loadout.isPrime
	shGlobal.cachedTitanLoadouts[ key ].primary = loadout.primary
	shGlobal.cachedTitanLoadouts[ key ].primeTitanRef = loadout.primeTitanRef
	shGlobal.cachedTitanLoadouts[ key ].difficulty = loadout.difficulty
	shGlobal.cachedTitanLoadouts[ key ].passive4 = loadout.passive4
	shGlobal.cachedTitanLoadouts[ key ].passive5 = loadout.passive5
	shGlobal.cachedTitanLoadouts[ key ].passive6 = loadout.passive6
	shGlobal.cachedTitanLoadouts[ key ].titanExecution = loadout.titanExecution
	if(skins)
	{
		shGlobal.cachedTitanLoadouts[ key ].skinIndex = loadout.skinIndex
		shGlobal.cachedTitanLoadouts[ key ].primeSkinIndex = loadout.primeSkinIndex
		shGlobal.cachedTitanLoadouts[ key ].camoIndex = loadout.camoIndex
		shGlobal.cachedTitanLoadouts[ key ].primeCamoIndex = loadout.primeCamoIndex
		shGlobal.cachedTitanLoadouts[ key ].primeDecalIndex = loadout.primeDecalIndex
		shGlobal.cachedTitanLoadouts[ key ].decalIndex = loadout.decalIndex

	}
	#endif
}
void function OverwriteModdedTitanLoadoutDefaultEquipment(TitanLoadoutDef loadout)
{
	TitanLoadoutDef Default = GetModdedTitanByClassNoPersist(loadout.titanClass)
	loadout.primary = Default.primary
	loadout.melee = Default.melee
	loadout.ordnance = Default.ordnance
	loadout.special = Default.special
	loadout.antirodeo = Default.antirodeo
	loadout.coreAbility = Default.coreAbility
	loadout.difficulty = Default.difficulty

	if(loadout.passive4 == "")
		loadout.passive4 = "pas_vanguard_core1"
	if(loadout.passive5 == "")
		loadout.passive5 = "pas_vanguard_core4"
	if(loadout.passive6 == "")
		loadout.passive6 = "pas_vanguard_core7"
	loadout.setFileMods = GetSetFileModsForSettingType( "titan", [ loadout.passive1, loadout.passive2, loadout.passive3, loadout.passive4, loadout.passive5, loadout.passive6 ] )

}
array<string> ModdedTitanClasses
void function RegisterModdedTitan(
	string Name, 
	string Primary, 
	string Left, string Mid, 
	string Right, string Core, 
	string BaseSetFile, 
	string BaseName, 
	int difficulty, 
	string PassiveTypeName,
	int ExecutionType,
	//array<array<var> > Passives,
	string Melee = "melee_titan_punch_scorch",
	string Voice = "titanos_bt"
)
{
	print("/////////////////CREATING CUSTOM TITAN////////////////////")
	print("/////////////////" + Name + "//////////////////////////////")
	//RegisterNewItemInitCallback(SCUFFED_UI_INIT2)
	//Create loadout
	TitanLoadoutDef loadout
	loadout.name				= Name
	loadout.titanClass			= Name
	loadout.setFile 			= BaseSetFile
	loadout.special				= Left
	loadout.antirodeo			= Mid
	loadout.voice				= Voice
	loadout.primary				= Primary
	loadout.melee		= Melee
	loadout.ordnance	= Right
	loadout.coreAbility	= Core
	loadout.difficulty	= difficulty
	loadout.isPrime = "titan_is_not_prime"
	loadout.primeTitanRef = "scorch_prime"
	loadout.passive4 = "pas_vanguard_core1"
	loadout.passive5 = "pas_vanguard_core4"
	loadout.passive6 = "pas_vanguard_core7"
	
	TitanClassModsToUse[loadout.titanClass] <- BaseName
	//OverwriteDefaultTitanLoadoutByIndex(7 + ModdedTitanClasses.len(), loadout)
	TitanLoadoutByIndex[7+TitanLoadoutByIndex.len()] <- loadout
	TitanExecutionsByIndex[7 + TitanExecutionsByIndex.len()] <- ExecutionType
	ModdedTitanLoadoutByClass[loadout.titanClass] <- loadout
	TitanLoadoutByClass[loadout.titanClass] <- loadout
	ModdedTitanClasses.append(Name)
	//TitanSetFilesForAnims[SetFile] <- BaseSetFile
}
void function RegisterModdedTitanItems(
		string Name, 
		string Primary, 
		string Left, string Mid, 
		string Right, string Core, 
		string BaseSetFile, 
		string BaseName, 
		string PassiveTypeName,
		int ExecutionType,
		bool InheritDefault = true,
		int difficulty = 2,
		//array<array<var> > Passives,
		string Melee = "melee_titan_punch_scorch",
		string Voice = "titanos_bt"
)
{
	ModdedTitanExtraPassiveTypes[Name] <- 0
	int passive4 = CreateModdedItemType(Name+"passive4")
	int passive5 = CreateModdedItemType(Name+"passive5")
	int passive6 = CreateModdedItemType(Name+"passive6")
	//Setfile indexing is bad, but still needed for some stuff
	TitanPassiveTypesBySetFile[BaseSetFile] <- {}
	TitanPassiveTypesBySetFile[BaseSetFile]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["passive2"] <- eItemTypes[PassiveTypeName]
	TitanPassiveTypesBySetFile[BaseSetFile]["passive4"] <- passive4
	TitanPassiveTypesBySetFile[BaseSetFile]["passive5"] <- passive5
	TitanPassiveTypesBySetFile[BaseSetFile]["passive6"] <- passive6
	TitanPassiveTypesBySetFile[BaseSetFile]["titanExecution"] <- ExecutionType
	
	TitanPassiveTypesByClass[Name] <- {}
	TitanPassiveTypesByClass[Name]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesByClass[Name]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[Name]["passive2"] <- eItemTypes[PassiveTypeName]
	TitanPassiveTypesByClass[Name]["passive4"] <- passive4
	TitanPassiveTypesByClass[Name]["passive5"] <- passive5
	TitanPassiveTypesByClass[Name]["passive6"] <- passive6
	TitanPassiveTypesByClass[Name]["titanExecution"] <- ExecutionType
	array<int> typesarray = [eItemTypes.TITAN_TITANFALL_PASSIVE, eItemTypes.TITAN_GENERAL_PASSIVE, eItemTypes[PassiveTypeName], passive4, passive5, passive6]
	CreateModdedTitanItem(999, eItemTypes.TITAN, Name, Name, "Whats the deal. with airline food?", "i sure love losing progress", $"ui/temp", 0, false, typesarray,expect asset(GetItemData(BaseName).i.coreIcon))
	
	CreateGenericSubItemData( eItemTypes.TITAN_TITANFALL_PASSIVE, Name, "pas_warpfall" )
	CreateGenericSubItemData( eItemTypes.TITAN_TITANFALL_PASSIVE, Name, "pas_bubbleshield" )
	foreach(ItemData item in GetAllItemsOfType(eItemTypes.TITAN_GENERAL_PASSIVE))
	{
	CreateGenericSubItemData( eItemTypes.TITAN_GENERAL_PASSIVE, Name, item.ref )
	}
	//foreach(array<var> passive in Passives)
	// {
		// CreateGenericItem(999, eItemTypes[PassiveTypeName], expect string(passive[0]), expect string(passive[1]), expect string(passive[2]), expect string(passive[3]), expect asset(passive[4]), 0, false)
	// }

	foreach(string ref, SubItemData subitemstuff in GetItemData(BaseName).subitems)
	{
		ItemData subitem = GetItemData(subitemstuff.ref)
		CreateGenericSubItemData(subitem.itemType,Name, subitem.ref, 0, subitem.i)
	}
	if(InheritDefault)
	{
		foreach(ItemData item in GetAllItemsOfType( eItemTypes[PassiveTypeName]))
		{
			CreateGenericSubItemData(  eItemTypes[PassiveTypeName], Name, item.ref )
		}
	}
}
void function RegisterModdedTitanCustomPassiveType(string name, array<ItemData> passives, string slot, int forceType = -1)
{
	if(!(name in ModdedTitanExtraPassiveTypes))
	{
		print("Modded titan does not exist")
		return
	}
	//if(ModdedTitanExtraPassiveTypes[name] == 3 && slot != "passive2")
	//{
	//	print("Modded titan already has 3 extra passive types")
	//	return
	//}
	//ModdedTitanExtraPassiveTypes[name] <- ModdedTitanExtraPassiveTypes[name]+1
	
	//Switch cases? the hell are those?
		else if(slot == "passive6" )
		{
			if(ModdedTitanExtraPassiveTypes[name] < 3)
				ModdedTitanExtraPassiveTypes[name] =3 //This does technically mean we cant use button 3 without the others but i mean, why would you
		}
		else if(slot == "passive5" )
		{
			if(ModdedTitanExtraPassiveTypes[name] < 2)
				ModdedTitanExtraPassiveTypes[name] =2
		}
		else if(slot == "passive4" )
		{
			if(ModdedTitanExtraPassiveTypes[name] < 1)
				ModdedTitanExtraPassiveTypes[name] =1
		}
		else
		{
			int num = eItemTypes[name+slot]
			TitanPassiveTypesByClass[name][slot] <- num
			TitanPassiveTypesBySetFile[GetModdedTitanByClassNoPersist(name).setFile][slot] <- num
		}


	string propertyname = name+slot
	table ePassives = expect table( getconsttable()["ePassives"])
	table passivesFromEnum = expect table( getconsttable()["_PassiveFromEnum"])
	foreach(int index, ItemData item in passives)
	{
		CreateGenericSubItemData(  eItemTypes[propertyname], name, item.ref )
		InitUnlock( item.ref, name, eUnlockType.TITAN_LEVEL, index )
		//GenerateModdedTitanPassiveStringForPersistence(name, (slot), item.ref, masktype  )
		if(item.ref in ePassives)
			continue
		
		ePassives[item.ref] <- ePassives.len()
		passivesFromEnum[item.ref] <- ePassives[item.ref]
	}
}
array<string> function GetModdedTitanClasses()
{
	return ModdedTitanClasses
}
void function CreateModdedTitanSimple( ModdedTitanData Titan )
{
	foreach(string name,  bool functionref(string name, string property, TitanLoadoutDef validatedLoadout) func in getBaseLoadoutValidationTable())
	{
		Titan.derivedData.PersistentValuesValidation[name] <- func
	}
	if(Titan.altChassisType == frameworkAltChassisMethod.ALT_TITAN)
	{
		Titan.derivedData.PersistentValuesValidation["setFile"] <- IsValidSetFile
	}
	if(Titan.passive2Array.len() == 0)
		delete Titan.derivedData.PersistentValuesValidation["passive2"]
	if(Titan.passive4Array.len() == 0)
		delete Titan.derivedData.PersistentValuesValidation["passive4"]
	if(Titan.passive5Array.len() == 0)
		delete Titan.derivedData.PersistentValuesValidation["passive5"]
	if(Titan.passive6Array.len() == 0)	
		delete Titan.derivedData.PersistentValuesValidation["passive6"]
	foreach(string name, CustomPersistentVar passives in Titan.ValidationOverrides)
	{
		if(passives.validationFunc == null)
			Titan.derivedData.PersistentValuesValidation[name] <- ValidPersistentPassiveForLoadout
		else
			Titan.derivedData.PersistentValuesValidation[name] <- passives.validationFunc
	}
	//No point searching for values that dont exist
	RegisterModdedTitanData(Titan)

	print("/////////////////CREATING CUSOTM TITAN////////////////////")
	print("/////////////////" + Titan.Name + "//////////////////////////////")
	//RegisterNewItemInitCallback(SCUFFED_UI_INIT2)
	//Create loadout
	TitanLoadoutDef loadout
	loadout.name				= Titan.Name
	loadout.titanClass			= Titan.Name
	loadout.setFile 			= Titan.BaseSetFile
	loadout.special				= Titan.Left.weaponName
	loadout.antirodeo			= Titan.Mid.weaponName
	loadout.voice				= Titan.Voice
	loadout.primary				= Titan.Primary.weaponName
	loadout.melee		= Titan.Melee
	loadout.ordnance	= Titan.Right.weaponName
	loadout.coreAbility	= Titan.Core.weaponName
	loadout.difficulty	= Titan.difficulty
	loadout.isPrime = Titan.startsAsPrime ? "titan_is_prime" : "titan_is_not_prime"
	loadout.primeTitanRef = "scorch_prime"
	loadout.passive4 = "pas_vanguard_core1"
	loadout.passive5 = "pas_vanguard_core4"
	loadout.passive6 = "pas_vanguard_core7"
	
	TitanClassModsToUse[loadout.titanClass] <- Titan.BaseName
	//OverwriteDefaultTitanLoadoutByIndex(7 + ModdedTitanClasses.len(), loadout)
	TitanLoadoutByIndex[7+TitanLoadoutByIndex.len()] <- loadout
	TitanExecutionsByIndex[7 + TitanExecutionsByIndex.len()] <- Titan.ExecutionType
	ModdedTitanLoadoutByClass[loadout.titanClass] <- loadout
	TitanLoadoutByClass[loadout.titanClass] <- loadout
	ModdedTitanClasses.append(Titan.Name)
	ModdedTitanReadyMessage[Titan.Name] <- Titan.titanReadyMessageOverride
	ModdedTitanPassiveHasAsset[Titan.Name] <- {}
	//ModdedTitan[Titan.Name]
	if(Titan.loadoutsMenuControllerFunc != null)
		TitanPreviewControllersByClass[Titan.Name] <- Titan.loadoutsMenuControllerFunc



	TitanEditLoadoutMenu[Titan.Name] <- Titan.customLoadoutMenu
	if(Titan.titanHints.len() > 0)
		ModdedTitanHints[Titan.Name] <- Titan.titanHints
	#if UI
	if(!IsTitanCollection( Titan.groupSettings.Name, Titan.groupSettings.path, Titan.groupSettings.createPathOnNoneFound ) )
		AddTitanGroupToSelectionList( Titan.groupSettings )
	AddTitanLoadoutToSelectionList(Titan)
	#endif
	#if MP
		RegisterModdedTitanItemsSimple(Titan)
	#endif

}
void function RegisterModdedTitanItemsSimple( ModdedTitanData titan )
{
	//AddPrivateMatchModeSettingEnum("#MODE_SETTING_CATEGORY_TITANFRAMEWORK", titan.Name, ["#SETTING_DISABLED", "#SETTING_ENABLED"], "1") Unimplemented
	ModdedTitanExtraPassiveTypes[titan.Name] <- 0



	// _____              _             _______                    
	//|  __ \            (_)           |__   __|                   
	//| |__) |_ _ ___ ___ ___   _____     | |_   _ _ __   ___  ___ 
	//|  ___/ _` / __/ __| \ \ / / _ \    | | | | | '_ \ / _ \/ __|
	//| |  | (_| \__ \__ \ |\ V /  __/    | | |_| | |_) |  __/\__ \
	//|_|   \__,_|___/___/_| \_/ \___|    |_|\__, | .__/ \___||___/
	//										__/ | |              
	//									   |___/|_|              

	TitanPassiveTypesBySetFile[titan.BaseSetFile] <- {}
	TitanPassiveTypesBySetFile[titan.BaseSetFile]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesBySetFile[titan.BaseSetFile]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE

	TitanPassiveTypesBySetFile[titan.BaseSetFile]["titanExecution"] <- GetModdedTitanLoadoutPassiveTypeByClass(titan.BaseName, "titanExecution")

	TitanPassiveTypesByClass[titan.Name] <- {}
	TitanPassiveTypesByClass[titan.Name]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesByClass[titan.Name]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE

	int passive2
	if(titan.passive2Array.len() > 0)
	{
		passive2 = CreateModdedItemType(titan.Name + "passive2")
		ModdedPassiveTypeDisplayNames[passive2] <- titan.passiveDisplayNameOverride
	}


	int passive4
	int passive5
	int passive6

	if(titan.passive4Array.len() > 0)
	{
		passive4 = CreateModdedItemType(titan.Name+"passive4")
		TitanPassiveTypesBySetFile[titan.BaseSetFile]["passive4"] <- passive4
		TitanPassiveTypesByClass[titan.Name]["passive4"] <- passive4
	}
	if(titan.passive5Array.len() > 0)
	{
		passive5 = CreateModdedItemType(titan.Name+"passive5")
		TitanPassiveTypesBySetFile[titan.BaseSetFile]["passive5"] <- passive5
		TitanPassiveTypesByClass[titan.Name]["passive5"] <- passive5
	}
	if(titan.passive6Array.len() > 0)
	{
		passive6 = CreateModdedItemType(titan.Name+"passive6")
		TitanPassiveTypesBySetFile[titan.BaseSetFile]["passive6"] <- passive6
		TitanPassiveTypesByClass[titan.Name]["passive6"] <- passive6
	}

	TitanPassiveTypesByClass[titan.Name]["titanExecution"] <- GetModdedTitanLoadoutPassiveTypeByClass(titan.BaseName, "titanExecution")
	
	/*
	_______ _ _                _ _                 
	|__   __(_) |              (_) |                
		| |   _| |_ __ _ _ __    _| |_ ___ _ __ ___  
		| |  | | __/ _` | '_ \  | | __/ _ \ '_ ` _ \ 
		| |  | | || (_| | | | | | | ||  __/ | | | | |
		|_|  |_|\__\__,_|_| |_| |_|\__\___|_| |_| |_|
													
													
	*/
		
	asset Image = expect asset(GetItemData(titan.BaseName).i.coreIcon)
	if(titan.icon != $"ui/temp")
		Image = titan.icon
	asset TitanIcon //WHY THE FUCK DID I DO THIS
	//TITAN ICON IS THE CORE ICON
	//IMAGE IS THE TITAN ICON
	if(titan.Core.scriptHandled && titan.coreIconOverride != $"ui/temp")
			TitanIcon = titan.coreIconOverride
	else if (titan.Core.scriptHandled)
			TitanIcon = Image
	else if(titan.Core.image != $"ui/temp")
	{
		try{
			TitanIcon = GetWeaponInfoFileKeyFieldAsset_Global(titan.Core.weaponName, "menu_icon")
		}
		catch(a)
		{
			TitanIcon = titan.Core.image
		}
	}
	else
		TitanIcon = titan.Core.image

	array<int> typesarray = [eItemTypes.TITAN_TITANFALL_PASSIVE, eItemTypes.TITAN_GENERAL_PASSIVE, passive2, passive4, passive5, passive6]
	ItemData titanData = CreateModdedTitanItem(999, eItemTypes.TITAN, titan.Name, titan.Name, titan.Description, titan.Description, Image, 0, false, typesarray,TitanIcon)
	titanData.i.statSpeed <- titan.speedStat
	titanData.i.statDamage <- titan.damageStat
	titanData.i.statHealth <- titan.healthStat
	titanData.i.statDash <- titan.dashStat

	/*
   __          __                            _ _                     
   \ \        / /                           (_) |                    
	\ \  /\  / /__  __ _ _ __   ___  _ __    _| |_ ___ _ __ ___  ___ 
	 \ \/  \/ / _ \/ _` | '_ \ / _ \| '_ \  | | __/ _ \ '_ ` _ \/ __|
	  \  /\  /  __/ (_| | |_) | (_) | | | | | | ||  __/ | | | | \__ \
	   \/  \/ \___|\__,_| .__/ \___/|_| |_| |_|\__\___|_| |_| |_|___/
						| |                                          
						|_|                                          
	*/
	array<int> weaponTypes = [eItemTypes.TITAN_PRIMARY, eItemTypes.TITAN_ORDNANCE, eItemTypes.TITAN_SPECIAL, eItemTypes.TITAN_ANTIRODEO, eItemTypes.TITAN_CORE_ABILITY ]
	array<ModdedTitanWeaponAbilityData&> weaponArray = [titan.Primary, titan.Right, titan.Left, titan.Mid, titan.Core]
	foreach(int index, ModdedTitanWeaponAbilityData weapon in weaponArray)
	{
		if(weapon.custom)
		{
			string weaponName = weapon.weaponName
			string displayName = weapon.displayName
			if(displayName == "")
			{
				try
				{
					displayName = GetWeaponInfoFileKeyField_GlobalString(weaponName, "printname") //This crashes if fake weapons are passed without a display name, just dont do that :)
				}
				catch (ex)
				{
					print("Weapon not precached, if this is a fake weapon ignore this error")
				}
			}
			string description = weapon.description
			string shortDesc = weapon.description
			if(description == "")
			{
				try
				{
				shortDesc = GetWeaponInfoFileKeyField_GlobalString(weaponName, "description")
				description = GetWeaponInfoFileKeyField_GlobalString(weaponName, "longdesc")
				}
				catch (ex)
				{
					print("Weapon not precached, if this is a fake weapon ignore this error")
				}
				
			}
			asset image = weapon.image
			if(image == $"ui/temp")
				try
				{
					image = GetWeaponInfoFileKeyFieldAsset_Global(weaponName, "menu_icon")
				}
				catch (ex)
				{
					print("Weapon not precached, if this is a fake weapon ignore this error")
				}
			
			CreateGenericItem(999, weaponTypes[index], weapon.weaponName, displayName, shortDesc, description, image, 0, false)
		}
	}
	//if(titan.Mid.custom)
	//{
	//	string weaponName = titan.Mid.weaponName
	//	string displayName = titan.Mid.displayName
	//	if(displayName == "")
	//		displayName = GetWeaponInfoFileKeyField_GlobalString(weaponName, "printname")
	//	string description = titan.Mid.description
	//	if(description == "")
	//		description = GetWeaponInfoFileKeyField_GlobalString(weaponName, "description")
	//	asset image = titan.Mid.image
	//	if(image == $"ui/temp")
	//		image = GetWeaponInfoFileKeyFieldAsset_Global(weaponName, "menu_icon")
	//	
	//	CreateGenericItem(999, eItemTypes.TITAN_ANTIRODEO, titan.Mid.weaponName, titan.Mid.displayName,titan.Mid.description, titan.Mid.description, titan.Mid.image, 0, false)
	//}
	//if(titan.Primary.custom)
	//{
	//	string weaponName = titan.Mid.weaponName
	//	string displayName = titan.Mid.displayName
	//	if(displayName == "")
	//		displayName = GetWeaponInfoFileKeyField_GlobalString(weaponName, "printname")
	//	string description = titan.Mid.description
	//	string shortDesc = titan.Mid.description
	//	if(description == "")
	//	{
	//		shortDesc = GetWeaponInfoFileKeyField_GlobalString(weaponName, "description")
	//		description = GetWeaponInfoFileKeyField_GlobalString(weaponName, "longdesc")
	//	}
	//	asset image = titan.Mid.image
	//	if(image == $"ui/temp")
	//		image = GetWeaponInfoFileKeyFieldAsset_Global(weaponName, "menu_icon")
	//	CreateGenericItem(999, eItemTypes.TITAN_PRIMARY, weaponName, displayName, shortDesc,description , image, 0, false)
	//}
	//if(titan.Core.custom)
	//	CreateGenericItem(999, eItemTypes.TITAN_CORE_ABILITY, titan.Core.weaponName, titan.Core.displayName, titan.Core.description,titan.Core.description , titan.Core.image , 0, false)
	//if(titan.Right.custom)
	//	CreateGenericItem(999, eItemTypes.TITAN_ORDNANCE, titan.Right.weaponName, titan.Right.displayName, titan.Right.description, titan.Right.description, titan.Right.image, 0, false)
	//if(titan.Left.custom)
	//	CreateGenericItem(999, eItemTypes.TITAN_SPECIAL, titan.Left.weaponName, titan.Left.displayName, titan.Left.description, titan.Left.description, titan.Left.image, 0, false)

	/*
			  _       _ _                     
			 | |     (_) |                    
	___ _   _| |__    _| |_ ___ _ __ ___  ___ 
	/ __| | | | '_ \  | | __/ _ \ '_ ` _ \/ __|
	\__ \ |_| | |_) | | | ||  __/ | | | | \__ \
	|___/\__,_|_.__/  |_|\__\___|_| |_| |_|___/                                                                                        
	*/

	CreateGenericSubItemData( eItemTypes.TITAN_TITANFALL_PASSIVE, titan.Name, "pas_warpfall" )
	CreateGenericSubItemData( eItemTypes.TITAN_TITANFALL_PASSIVE, titan.Name, "pas_bubbleshield" )
	InitUnlock("pas_warpfall", titan.Name, eUnlockType.TITAN_LEVEL, 1)
	InitUnlock("pas_bubbleshield", titan.Name, eUnlockType.TITAN_LEVEL, 2)
	
	if(titan.passive4Array.len() > 0)
	{
		array<ItemData> passives4
		foreach(int index, ModdedPassiveData passive in titan.passive4Array)
		{
			if(shouldPrintDevStuff())
				print("Creating passive4 data for "+passive.Name)
			passives4.append(CreateGenericItem(1000+index, passive4, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false))
			if(passive.customIcon)
				ModdedTitanPassiveHasAsset[titan.Name]["passive4"] <- true
		}
		RegisterModdedTitanCustomPassiveType(titan.Name, passives4, "passive4")
	}
	if(titan.passive6Array.len() > 0 )
	{
		array<ItemData> passives5
		foreach(int index, ModdedPassiveData passive in titan.passive5Array)
		{
			if(shouldPrintDevStuff())
				print("Creating passive5 data for "+passive.Name)
			passives5.append(CreateGenericItem(1000+index, passive5, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false))
			if(passive.customIcon)
				ModdedTitanPassiveHasAsset[titan.Name]["passive5"] <- true
		}
		RegisterModdedTitanCustomPassiveType(titan.Name, passives5, "passive5")
	}

	if(titan.passive6Array.len() > 0)
	{
		array<ItemData> passives6
		foreach(int index, ModdedPassiveData passive in titan.passive6Array)
		{
			if(shouldPrintDevStuff())
				print("Creating passive6 data for "+passive.Name)
			passives6.append(CreateGenericItem(1000+index, passive6, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false))
			if(passive.customIcon)
				ModdedTitanPassiveHasAsset[titan.Name]["passive6"] <- true
		}
		RegisterModdedTitanCustomPassiveType(titan.Name, passives6, "passive6")
	}

	foreach(int index, ItemData item in GetAllItemsOfType(eItemTypes.TITAN_GENERAL_PASSIVE))
	{
		CreateGenericSubItemData( eItemTypes.TITAN_GENERAL_PASSIVE, titan.Name, item.ref )
		InitUnlock( item.ref, titan.Name, eUnlockType.TITAN_LEVEL, GetUnlockLevelReqWithParent( item.ref, "vanguard" ) )
	}
	//foreach(array<var> passive in Passives)
	// {
		// CreateGenericItem(999, eItemTypes[PassiveTypeName], expect string(passive[0]), expect string(passive[1]), expect string(passive[2]), expect string(passive[3]), expect asset(passive[4]), 0, false)
	// }


	if(titan.passive2Array.len() > 0)
	{
		array<ItemData> passives2
		foreach(int index, ModdedPassiveData passive in titan.passive2Array)
		{
			if(shouldPrintDevStuff())
				print("Creating passive2 data for "+passive.Name)
			passives2.append(CreateGenericItem(1000+index, passive2, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false))
			if(passive.customIcon)
				ModdedTitanPassiveHasAsset[titan.Name]["passive2"] <- true
		}
		RegisterModdedTitanCustomPassiveType(titan.Name, passives2, "passive2", GetModdedTitanLoadoutPassiveTypeByClass(titan.BaseName, "passive2"))
	}
	else
	{
		foreach(ItemData item in GetAllItemsOfType( passive2 ))
		{
			CreateGenericSubItemData(  passive2, titan.Name, item.ref )
		}
	}
	//FD ITEMS
	//array<ItemDisplayData> upgradesInOrder
	foreach(int index, ModdedPassiveData passive in titan.passiveFDArray)
	{
		if(shouldPrintDevStuff())
			print("Creating passiveFD data for "+passive.Name)
		//ItemData item = CreateGenericItem(999, eItemTypes.TITAN_FD_UPGRADE, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false)
		CreateFDTitanUpgradeData( 1001+index, passive.Type, false, passive.Name, titan.Name, passive.Name, passive.description, passive.image, passive.image, 1, 0  )
		InitUnlock( passive.Name, titan.Name, eUnlockType.FD_UNLOCK_POINTS, index+1 )
		//print(index + passive.Name + titan.Name)
		//upgradesInOrder.append(GetItemDisplayData(GetItemData(pasive.Name)))
		if(passive.customIcon)
			ModdedTitanPassiveHasAsset[titan.Name]["FDUpgrade"] <- true
	}

	//Custom Persistent Vars

	array<ModdedPassiveData> passivesExtraData
	foreach(string name, CustomPersistentVar passives in titan.ValidationOverrides)
	{
		if(passives.passiveItemsMethod == eItemsMethod.NONE)// Assume that this is handled entirely by custom code rather than the items system
			continue
		if(passives.passiveItemsMethod == eItemsMethod.CREATE)
		{
			passives.itemTypeOverride = CreateModdedItemType(titan.Name + passives.property)
			array<ItemData> passivesExtra
			foreach(int index, ModdedPassiveData passive in passives.acceptedItems)
			{
				if(shouldPrintDevStuff())
					print("Creating additional passive data for "+passive.Name)
				passivesExtra.append(CreateGenericItem(1000+index, passive2, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false))
				if(passive.customIcon)
					ModdedTitanPassiveHasAsset[titan.Name][name] <- true
			}
			RegisterModdedTitanCustomPassiveType(titan.Name, passivesExtra, name)
		}
		if(passives.passiveItemsMethod == eItemsMethod.FIND || passives.passiveItemsMethod == eItemsMethod.FIND_FORCE)
		{
			array<ItemData> passivesExtra
			foreach(int index, ModdedPassiveData passive in passives.acceptedItems)
			{
				if(shouldPrintDevStuff())
					print("Creating additional passive data for "+passive.Name)
				passivesExtra.append( GetItemData(passive.Name) )
				if(passive.customIcon)
					ModdedTitanPassiveHasAsset[titan.Name][name] <- true
				CreateGenericSubItemData(  passives.itemTypeOverride, titan.Name, passive.Name )
				InitUnlock( passive.Name, titan.Name, eUnlockType.TITAN_LEVEL, index )
			}
			TitanPassiveTypesByClass[titan.Name][name] <- passives.itemTypeOverride
			if(passives.passiveItemsMethod == eItemsMethod.FIND_FORCE)
			{
				if(!(titan.Name in ForcedItemsForItemTypeAndClass))
					ForcedItemsForItemTypeAndClass[titan.Name] <- {}
				ForcedItemsForItemTypeAndClass[titan.Name][passives.itemTypeOverride] <- passivesExtra
			}
		}
		if(passives.passiveItemsMethod == eItemsMethod.FIND_ALL_TYPE)
		{
			foreach(int index, ItemData item in GetAllItemsOfType( passives.itemTypeOverride ))
			{
				CreateGenericSubItemData(  passives.itemTypeOverride, titan.Name, item.ref )
				InitUnlock( item.ref, titan.Name, eUnlockType.TITAN_LEVEL, index )
			}
			TitanPassiveTypesByClass[titan.Name][name] <- passives.itemTypeOverride
		}
		if(passives.FindFunc != null)
		{
			if(!(titan.Name in TitanFindFunctionsForItemType))
				TitanFindFunctionsForItemType[titan.Name] <- {}
			TitanFindFunctionsForItemType[titan.Name][passives.itemTypeOverride] <- passives.FindFunc
		}
	}


	foreach(string ref, SubItemData subitemstuff in GetItemData(titan.BaseName).subitems)
	{
		ItemData subitem = GetItemData(subitemstuff.ref)
		CreateGenericSubItemData(subitem.itemType,titan.Name, subitem.ref, 0, subitem.i)
		InitUnlock( subitemstuff.ref, titan.Name, eUnlockType.TITAN_LEVEL, GetUnlockLevelReqWithParent( subitemstuff.ref, titan.BaseName ) )
	}
	/*
	  _______ _ _                __  __           _      _     
	 |__   __(_) |              |  \/  |         | |    | |    
		| |   _| |_ __ _ _ __   | \  / | ___   __| | ___| |___ 
		| |  | | __/ _` | '_ \  | |\/| |/ _ \ / _` |/ _ \ / __|
		| |  | | || (_| | | | | | |  | | (_) | (_| |  __/ \__ \
		|_|  |_|\__\__,_|_| |_| |_|  |_|\___/ \__,_|\___|_|___/
															
															
	*/
	//No 

}

