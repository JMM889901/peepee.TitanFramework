global function IsItemModded //Only checks for PILOT items, implemented after titans 
global function registerModdedPersistentWeapon 
global function registerModdedPilotPassive
global function registerModdedPilotSuit
global function GetModdedTacticalSuit
global function registerModdedModAttachment
global function GetModdedWeaponXPType
//global function registerModdedPersistentItem
array<moddedPilotWeaponData> moddedPersistentWeaponData
array<ItemData> moddedPersistentWeaponItems
array<string> moddedPersistentWeaponRefs
array<string> moddedPersistentPassiveRefs
array<string> moddedPersistentWeaponMods
table<string, string> moddedTacticalSuitRefs
table<string, string> moddedTatcialSuitSetFiles
table<string, string> weaponXPType

void function registerModdedPersistentWeapon(moddedPilotWeaponData data)
{
    if(!moddedPersistentWeaponData.contains(data)) 
        moddedPersistentWeaponData.append(data)
    if(!moddedPersistentWeaponRefs.contains(data.weaponName))
        moddedPersistentWeaponRefs.append(data.weaponName)

        
    weaponXPType[data.weaponName] <- data.weaponXPType
    AddCallback_OnRegisterCustomItems( void function() : ( data ){
        CreateWeaponData(999, data.itemType, false, data.weaponName, false )
        InitUnlock(data.weaponName, "", eUnlockType.PLAYER_LEVEL, 0 )
        foreach(int index, moddedWeaponAttachmentMod mod in data.attachments)
        {
            registerModdedModAttachment(data.weaponName, mod, index) 
        }
    } )
}
string function GetModdedWeaponXPType(string weapon)
{
    return weaponXPType[weapon]
}
void function registerModdedModAttachment(string weaponName, moddedWeaponAttachmentMod mod, int index = 1)
{
    if(mod.baseGame)
    {
        ItemData existingData = GetItemData(mod.itemName)
        CreateGenericSubItemData(mod.itemType, weaponName, mod.itemName, 0)
        InitUnlock(mod.itemName, weaponName, eUnlockType.WEAPON_LEVEL, index + 1 )
    }
    else
    {
        if( !ItemDefined(mod.itemName) )
        {
            moddedPersistentWeaponRefs.append(mod.itemName)
            ItemData item = CreateGenericItem(1000, mod.itemType, mod.itemName, mod.displayName, mod.description, mod.description, mod.icon, 0, false)
            item.longname = mod.displayName
        }
        CreateGenericSubItemData(mod.itemType, weaponName, mod.itemName, 0)
        InitUnlock(mod.itemName, weaponName, eUnlockType.WEAPON_LEVEL, index + 1 )
    }
}
void function registerModdedPilotPassive(ModdedPassiveData passive)
{

    AddCallback_OnRegisterCustomItems( void function() : ( passive ){
        CreateGenericItem(1000, passive.itemType, passive.Name, passive.Name, passive.description, passive.description, passive.image, 0, false)
    } )
    moddedPersistentPassiveRefs.append(passive.Name)
}
void function registerModdedPilotSuit(moddedPilotSuitData data)
{
    AddCallback_OnRegisterCustomItems( void function() : ( data ){
        CreateGenericItem(1000, eItemTypes.PILOT_SUIT, data.name, data.displayName, data.description, data.description, data.icon, 0, false)
    } )
    moddedPersistentPassiveRefs.append(data.name)
    moddedTacticalSuitRefs[data.name] <- data.suit
    #if CLIENT && MP
    InheritPilotMenuAnims(data.suit, data.name)
    #endif
}
string function GetModdedTacticalSuit(string item)
{
    return moddedTacticalSuitRefs[item]
}
bool function IsItemModded(string item)
{
    return moddedPersistentWeaponRefs.contains(item) || moddedPersistentPassiveRefs.contains(item) || moddedPersistentWeaponMods.contains(item)
}