global function PreInit
global function FrameworkInit
global function GetModdedTitanClasses
global function GetModdedTitanByClassNoPersist
//global function GetModdedTitanByIndexNoPersist
//global function GetModdedTitansByIndexNoPersist
global function GetModdedTitansByClassNoPersist
global function OverwriteGlobalTitanLoadoutByIndex
global function GetModdedTitanClassForMods
global function GetModdedTitanSetFileForAnims
global function GetModdedTitansSetFileForAnims
global function GetModdedTitanPassive1TypeByRef
global function GetModdedTitanExecutionTypeByClass
global function GetModdedTitanLoadoutPassiveType
global function GetModdedTitanLoadoutPassiveTypeByClass
global function OverwriteModdedTitanLoadoutDefaultEquipment
global function OverwriteDefaultTitanLoadoutByIndex
global function RegisterModdedTitan
global function RegisterModdedTitanItems
#if SERVER
global function SetTitanLoadout
#endif
table<string, TitanLoadoutDef> TitanLoadoutByClass
table<int, TitanLoadoutDef> TitanLoadoutByIndex
table<string, string> TitanClassModsToUse //Used for alot, but not actually used for passives
table<string, string> TitanSetFilesForAnims // Used for other things
table<string, int> TitanPassiveTypesByRef
table<int, int> TitanExecutionsByIndex
table<string, table<string, int> > TitanPassiveTypesBySetFile
table<string, table<string, int> > TitanPassiveTypesByClass
//Getters

int function GetModdedTitanLoadoutPassiveType(string ref, string property)
{
	if(ref in TitanPassiveTypesBySetFile)
	{
		return TitanPassiveTypesBySetFile[ref][property]
	}
	return -1
}
int function GetModdedTitanLoadoutPassiveTypeByClass(string ref, string property)
{
	if(ref in TitanPassiveTypesByClass)
	{
		return TitanPassiveTypesByClass[ref][property]
	}
	return -1
}
int function GetModdedTitanExecutionTypeByClass(string titanClass)
{
	return TitanExecutionsByIndex[titanClass]
}
TitanLoadoutDef function GetModdedTitanByClassNoPersist(string titanClass)
{
	return TitanLoadoutByClass[titanClass]
}
TitanLoadoutDef function GetModdedTitanByIndexNoPersist(int index)
{
	return TitanLoadoutByIndex[index]
}
table<int, TitanLoadoutDef>  function GetModdedTitansByIndexNoPersist()
{
	return TitanLoadoutByIndex
}
table<string, TitanLoadoutDef>  function GetModdedTitansByClassNoPersist()
{
	return TitanLoadoutByClass
}
string function GetModdedTitanClassForMods(string index)
{
	if(index in TitanClassModsToUse)
		return TitanClassModsToUse[index]
	return index
}
table<string,string> function GetModdedTitansSetFileForAnims()
{
	return TitanSetFilesForAnims
}
string function GetModdedTitanSetFileForAnims(string key)
{
	if(key in TitanSetFilesForAnims)
		return TitanSetFilesForAnims[key]
	//print("did NOT change setfile========")
	return key
}
int function GetModdedTitanPassive1TypeByRef(string ref){
	return TitanPassiveTypesByRef[ref]
}
#if SERVER
bool function SetPlayerTitanRemote(entity player, array<string> args)
{
	if(args[1] == "modded")
		SetTitanLoadout(player, args[0].tointeger(), GetModdedTitanByClassNoPersist(GetModdedTitanClasses()[args[2].tointeger()]))
	else if(args[1] == "default")
		SetTitanLoadout(player, args[0].tointeger(), GetDefaultTitanLoadout(args[2].tointeger()))	

	return true
}
void function SetTitanLoadout(entity player, int index, TitanLoadoutDef loadout)
{
	if(index < 7)
	{
		return
		print("Should not modify existing titans. Do so manually if you want to at your own risk")
	}
	if(loadout.name in TitanLoadoutByClass)
	{
		SetPersistentLoadoutValue( player, "titan", index, "name",				loadout.name )
		SetPersistentLoadoutValue( player, "titan", index, "passive2",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "passive2"))[0].ref)
		SetPersistentLoadoutValue( player, "titan", index, "titanExecution",			GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.name, "titanExecution"))[0].ref)
		//GetSetFileModsForSettingType( "titan", [ loadout.passive1, loadout.passive2, loadout.passive3, loadout.passive4, loadout.passive5, loadout.passive6 ] )
	}
	else if(loadout.titanClass in TitanPassiveTypesByClass)
	{
		SetPersistentLoadoutValue( player, "titan", index, "isPrime",				loadout.isPrime )
		SetPersistentTitanLoadout(player, index, loadout)
	}
	Remote_CallFunction_NonReplay( player, "UpdateAllCachedTitanLoadouts" )
	Remote_CallFunction_NonReplay( player, "ServerCallback_UpdateTitanModel", index )
	player.p.titanLoadoutChanged = true
	thread UpdateCachedLoadouts()
	
	PrintTitanLoadout(GetTitanLoadoutFromPersistentData(player, index))
	PrintTitanLoadout(shGlobal.cachedTitanLoadouts[index])

}
#endif
void function PreInit()
{
	#if UI
	FrameworkMenuInit()
	#endif
	PreInitGlobal()
	RegisterTitanPassiveTypes("titan_ogre_meteor", eItemTypes.TITAN_SCORCH_PASSIVE,eItemTypes.TITAN_SCORCH_EXECUTION, "scorch")
	RegisterTitanPassiveTypes("titan_atlas_stickybomb", eItemTypes.TITAN_ION_PASSIVE, eItemTypes.TITAN_ION_EXECUTION, "ion")
	RegisterTitanPassiveTypes("titan_atlas_tracker", eItemTypes.TITAN_TONE_PASSIVE,eItemTypes.TITAN_TONE_EXECUTION, "tone")
	RegisterTitanPassiveTypes("titan_ogre_minigun", eItemTypes.TITAN_LEGION_PASSIVE,eItemTypes.TITAN_LEGION_EXECUTION, "legion")
	RegisterTitanPassiveTypes("titan_stryder_sniper", eItemTypes.TITAN_NORTHSTAR_PASSIVE,eItemTypes.TITAN_NORTHSTAR_EXECUTION, "northstar")
	RegisterTitanPassiveTypes("titan_stryder_leadwall", eItemTypes.TITAN_RONIN_PASSIVE,eItemTypes.TITAN_RONIN_EXECUTION, "ronin")
	RegisterTitanPassiveTypes("titan_atlas_vanguard", eItemTypes.TITAN_VANGUARD_PASSIVE,eItemTypes.TITAN_VANGUARD_EXECUTION, "vanguard",
	 eItemTypes.TITAN_UPGRADE1_PASSIVE, eItemTypes.TITAN_UPGRADE2_PASSIVE, eItemTypes.TITAN_UPGRADE3_PASSIVE)
	
}
void function FrameworkInit()
{
	for(int i = 7; i < 10; i++)
	{//most of this is redundant but im afraid to remove it at this point
		OverwriteDefaultTitanLoadoutByIndex(i, GetDefaultTitanLoadout(i - 7))
		print("Default titan loadout "+(i-7) + "======")
		PrintTitanLoadout(GetDefaultTitanLoadout(i - 7))
		print("Custom titan loadout "+i +"========")
		PrintTitanLoadout(GetDefaultTitanLoadout(i))
		#if CLIENT
		if(GetCachedTitanLoadout( i ).titanClass == "")
			OverwriteGlobalTitanLoadoutByIndex(i, GetDefaultTitanLoadout(i - 7))
		PrintTitanLoadout(GetCachedTitanLoadout(i))
		#endif
		#if UI && MP
		if(GetValidatedPersistentLoadoutValue( GetLocalClientPlayer(), "titan", i, "titanClass" ) == "")
		{
			OverwriteGlobalTitanLoadoutByIndex(i, GetDefaultTitanLoadout( i-7))
		}
		else
		{
			OverwriteGlobalTitanLoadoutByIndex(i, GetTitanLoadoutFromPersistentData(GetLocalClientPlayer(), i))
		}
		#endif
		#if SERVER
		AddClientCommandCallback( "SetTitanClass", SetPlayerTitanRemote )
		foreach(entity player in GetPlayerArray())
		{
			if(GetValidatedPersistentLoadoutValue( player, "titan", i, "titanClass" ) == "")
			{
				TitanLoadoutDef loadout = GetDefaultTitanLoadout( i-7)
				loadout.passive2 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, "passive2"))[0].ref
				loadout.passive3 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, "passive3"))[0].ref
				loadout.passive1 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(loadout.titanClass, "passive1"))[0].ref
				SetPersistentTitanLoadout(player, i, loadout)
			}
		}
		#endif

		//#if CLIENT
		//if(GetTitanLoadoutFromPersistentData(GetLocalClientPlayer(), i).name == "")
			//GetLocalClientPlayer().SetPersistentVar( "titanLoadouts[" + i + "].name", GetDefaultTitanLoadout(i-7).name)
			//GetLocalClientPlayer().SetPersistentVar( "titanLoadouts[" + i + "].titanClass", GetDefaultTitanLoadout(i-7).titanClass)
		//#endif
	}
}
void function RegisterTitanPassiveTypes(string SetFile, int passive2,int execution, string titanClass, int passive4 = -1, int passive5 = -1, int passive6 = -1)
{
	TitanPassiveTypesBySetFile[SetFile] <- {}
	TitanPassiveTypesBySetFile[SetFile]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesBySetFile[SetFile]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[SetFile]["passive2"] <- passive2
	TitanPassiveTypesBySetFile[SetFile]["passive4"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[SetFile]["passive5"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[SetFile]["passive6"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[SetFile]["titanExecution"] <- execution
	TitanPassiveTypesByClass[titanClass] <- {}
	TitanPassiveTypesByClass[titanClass]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["passive2"] <- passive2
	TitanPassiveTypesByClass[titanClass]["passive4"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["passive5"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["passive6"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[titanClass]["titanExecution"] <- execution
	if(passive4 != -1)
	{
		TitanPassiveTypesBySetFile[SetFile]["passive4"]		<- passive4
		TitanPassiveTypesByClass[titanClass]["passive4"]	<- passive4
	}
	if(passive5 != -1)
	{
		TitanPassiveTypesBySetFile[SetFile]["passive5"]		<- passive5
		TitanPassiveTypesByClass[titanClass]["passive5"]	<- passive5
	}
	if(passive6 != -1)
	{
		TitanPassiveTypesBySetFile[SetFile]["passive6"]		<- passive6
		TitanPassiveTypesByClass[titanClass]["passive6"]	<- passive6
	}
}
void function OverwriteDefaultTitanLoadoutByIndex(int key, TitanLoadoutDef loadout)
{
	//shGlobal.cachedTitanLoadouts[ key ] = loadout
	shGlobal.defaultTitanLoadouts[ key ].name = loadout.name
	shGlobal.defaultTitanLoadouts[ key ].titanClass = loadout.titanClass
	shGlobal.defaultTitanLoadouts[ key ].setFile = loadout.setFile
	shGlobal.defaultTitanLoadouts[ key ].coreAbility = loadout.coreAbility
	shGlobal.defaultTitanLoadouts[ key ].ordnance =  loadout.ordnance
	shGlobal.defaultTitanLoadouts[ key ].special =  loadout.special
	shGlobal.defaultTitanLoadouts[ key ].antirodeo =  loadout.antirodeo
	shGlobal.defaultTitanLoadouts[ key ].voice =  loadout.voice
	shGlobal.defaultTitanLoadouts[ key ].skinIndex =  loadout.skinIndex
	shGlobal.defaultTitanLoadouts[ key ].isPrime =  loadout.isPrime
	shGlobal.defaultTitanLoadouts[ key ].primary = loadout.primary
	shGlobal.defaultTitanLoadouts[ key ].primeTitanRef = loadout.primeTitanRef
	shGlobal.defaultTitanLoadouts[ key ].difficulty = loadout.difficulty
	shGlobal.defaultTitanLoadouts[ key ].passive4 = loadout.passive4
	shGlobal.defaultTitanLoadouts[ key ].passive5 = loadout.passive5
	shGlobal.defaultTitanLoadouts[ key ].passive6 = loadout.passive6
}
void function OverwriteGlobalTitanLoadoutByIndex(int key, TitanLoadoutDef loadout, bool skins = false)
{
	#if UI || CLIENT
	//shGlobal.cachedTitanLoadouts[ key ] = loadout
	shGlobal.cachedTitanLoadouts[ key ].name = loadout.name
	shGlobal.cachedTitanLoadouts[ key ].titanClass = loadout.titanClass
	shGlobal.cachedTitanLoadouts[ key ].setFile = loadout.setFile
	shGlobal.cachedTitanLoadouts[ key ].coreAbility = loadout.coreAbility
	shGlobal.cachedTitanLoadouts[ key ].ordnance =  loadout.ordnance
	shGlobal.cachedTitanLoadouts[ key ].special =  loadout.special
	shGlobal.cachedTitanLoadouts[ key ].antirodeo =  loadout.antirodeo
	shGlobal.cachedTitanLoadouts[ key ].voice =  loadout.voice
	shGlobal.cachedTitanLoadouts[ key ].skinIndex =  loadout.skinIndex
	shGlobal.cachedTitanLoadouts[ key ].isPrime =  loadout.isPrime
	shGlobal.cachedTitanLoadouts[ key ].primary = loadout.primary
	shGlobal.cachedTitanLoadouts[ key ].primeTitanRef = loadout.primeTitanRef
	shGlobal.cachedTitanLoadouts[ key ].difficulty = loadout.difficulty
	shGlobal.cachedTitanLoadouts[ key ].passive4 = loadout.passive4
	shGlobal.cachedTitanLoadouts[ key ].passive5 = loadout.passive5
	shGlobal.cachedTitanLoadouts[ key ].passive6 = loadout.passive6
	shGlobal.cachedTitanLoadouts[ key ].titanExecution = loadout.titanExecution
	if(skins)
	{
		shGlobal.cachedTitanLoadouts[ key ].skinIndex = loadout.skinIndex
		shGlobal.cachedTitanLoadouts[ key ].primeSkinIndex = loadout.primeSkinIndex
		shGlobal.cachedTitanLoadouts[ key ].camoIndex = loadout.camoIndex
		shGlobal.cachedTitanLoadouts[ key ].primeCamoIndex = loadout.primeCamoIndex
		shGlobal.cachedTitanLoadouts[ key ].primeDecalIndex = loadout.primeDecalIndex
		shGlobal.cachedTitanLoadouts[ key ].decalIndex = loadout.decalIndex

	}
	#endif
}
void function OverwriteModdedTitanLoadoutDefaultEquipment(TitanLoadoutDef loadout)
{
	TitanLoadoutDef Default = GetModdedTitanByClassNoPersist(loadout.titanClass)
	loadout.primary = Default.primary
	loadout.melee = Default.melee
	loadout.ordnance = Default.ordnance
	loadout.special = Default.special
	loadout.antirodeo = Default.antirodeo
	loadout.coreAbility = Default.coreAbility
	loadout.difficulty = Default.difficulty

	if(loadout.passive4 == "")
		loadout.passive4 = "pas_vanguard_core1"
	if(loadout.passive5 == "")
		loadout.passive5 = "pas_vanguard_core4"
	if(loadout.passive6 == "")
		loadout.passive6 = "pas_vanguard_core7"
	loadout.setFileMods = GetSetFileModsForSettingType( "titan", [ loadout.passive1, loadout.passive2, loadout.passive3, loadout.passive4, loadout.passive5, loadout.passive6 ] )

}
array<string> ModdedTitanClasses
void function RegisterModdedTitan(
	string Name, 
	string Primary, 
	string Left, string Mid, 
	string Right, string Core, 
	string BaseSetFile, 
	string BaseName, 
	int difficulty, 
	string PassiveTypeName,
	int ExecutionType,
	//array<array<var> > Passives,
	string Melee = "melee_titan_punch_scorch",
	string Voice = "titanos_bt"
)
{
	print("Yep")
	print("/////////////////CREATING CUSOTM TITAN////////////////////")
	print("/////////////////" + Name + "//////////////////////////////")
	//RegisterNewItemInitCallback(SCUFFED_UI_INIT2)
	//Create loadout
	TitanLoadoutDef loadout
	loadout.name				= Name
	loadout.titanClass			= Name
	loadout.setFile 			= BaseSetFile
	loadout.special				= Left
	loadout.antirodeo			= Mid
	loadout.voice				= Voice
	loadout.primary				= Primary
	loadout.melee		= Melee
	loadout.ordnance	= Right
	loadout.coreAbility	= Core
	loadout.difficulty	= difficulty
	loadout.isPrime = "titan_is_not_prime"
	loadout.primeTitanRef = "scorch_prime"
	loadout.passive4 = "pas_vanguard_core1"
	loadout.passive5 = "pas_vanguard_core4"
	loadout.passive6 = "pas_vanguard_core7"
	
	TitanClassModsToUse[loadout.titanClass] <- BaseName
	//OverwriteDefaultTitanLoadoutByIndex(7 + ModdedTitanClasses.len(), loadout)
	TitanLoadoutByIndex[7+TitanLoadoutByIndex.len()] <- loadout
	TitanExecutionsByIndex[7 + TitanExecutionsByIndex.len()] <- ExecutionType
	TitanLoadoutByClass[loadout.titanClass] <- loadout
	ModdedTitanClasses.append(Name)
	//TitanSetFilesForAnims[SetFile] <- BaseSetFile
}
void function RegisterModdedTitanItems(
		string Name, 
		string Primary, 
		string Left, string Mid, 
		string Right, string Core, 
		string BaseSetFile, 
		string BaseName, 
		int difficulty, 
		string PassiveTypeName,
		int ExecutionType,
		//array<array<var> > Passives,
		string Melee = "melee_titan_punch_scorch",
		string Voice = "titanos_bt"
)
{
	//CreateModdedItemType(PassiveTypeName)
	//Setfile indexing is bad, but still needed for some stuff
	TitanPassiveTypesBySetFile[BaseSetFile] <- {}
	TitanPassiveTypesBySetFile[BaseSetFile]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["passive2"] <- eItemTypes[PassiveTypeName]
	TitanPassiveTypesBySetFile[BaseSetFile]["passive4"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["passive5"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["passive6"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesBySetFile[BaseSetFile]["titanExecution"] <- ExecutionType
	
	TitanPassiveTypesByClass[Name] <- {}
	TitanPassiveTypesByClass[Name]["passive3"] <- eItemTypes.TITAN_TITANFALL_PASSIVE
	TitanPassiveTypesByClass[Name]["passive1"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[Name]["passive2"] <- eItemTypes[PassiveTypeName]
	TitanPassiveTypesByClass[Name]["passive4"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[Name]["passive5"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[Name]["passive6"] <- eItemTypes.TITAN_GENERAL_PASSIVE
	TitanPassiveTypesByClass[Name]["titanExecution"] <- ExecutionType

	CreateModdedTitanItem(999, eItemTypes.TITAN, Name, Name, "Whats the deal. with airline food?", "i sure love losing progress", $"ui/temp", 0, false, eItemTypes[PassiveTypeName],expect asset(GetItemData(BaseName).i.coreIcon))
	CreateGenericSubItemData( eItemTypes.TITAN_TITANFALL_PASSIVE, Name, "pas_warpfall" )
	CreateGenericSubItemData( eItemTypes.TITAN_TITANFALL_PASSIVE, Name, "pas_bubbleshield" )
	foreach(ItemData item in GetAllItemsOfType(eItemTypes.TITAN_GENERAL_PASSIVE))
	{
	CreateGenericSubItemData( eItemTypes.TITAN_GENERAL_PASSIVE, Name, item.ref )
	}
	//foreach(array<var> passive in Passives)
	// {
		// CreateGenericItem(999, eItemTypes[PassiveTypeName], expect string(passive[0]), expect string(passive[1]), expect string(passive[2]), expect string(passive[3]), expect asset(passive[4]), 0, false)
	// }

	foreach(string ref, SubItemData subitemstuff in GetItemData(BaseName).subitems)
	{
		ItemData subitem = GetItemData(subitemstuff.ref)
		CreateGenericSubItemData(subitem.itemType,Name, subitem.ref, 0, subitem.i)
	}
	foreach(ItemData item in GetAllItemsOfType( eItemTypes[PassiveTypeName]))
	{
	CreateGenericSubItemData(  eItemTypes[PassiveTypeName], Name, item.ref )
	}
}
array<string> function GetModdedTitanClasses()
{
	return ModdedTitanClasses
}
